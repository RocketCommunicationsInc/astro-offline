import { attachShadow, createEvent, h, Host, proxyCustomElement } from '@stencil/core/internal/client';

const ruxModalCss = ":host{--modal-title-color:var(--color-default-text);--modal-background-color:var(--color-surface);--modal-border-color:var(--color-primary);display:contents}*,*::before,*::after{box-sizing:inherit}:host([hidden]){display:none}rux-button-group{margin-top:auto;margin-left:auto;align-self:flex-end}.rux-modal__wrapper{position:fixed;top:0;left:0;height:100vh;width:100vw;display:flex;justify-content:center;align-items:center;z-index:1100;background-color:rgba(0, 0, 0, 0.5);animation:fadeIn 0.5s;-webkit-animation:fadeIn 0.5s;-moz-animation:fadeIn 0.5s;-o-animation:fadeIn 0.5s;-ms-animation:fadeIn 0.5s}.rux-modal__dialog{position:relative;display:flex;flex-direction:column;justify-content:space-between;background-color:var(--modal-background-color);width:28rem;height:13.5rem;border:0;margin:auto;padding:0;user-select:none;box-shadow:0 4px 4px 1px rgba(0, 0, 0, 0.25), 0 4px 4px 3px rgba(0, 0, 0, 0.12), 0 4px 4px rgba(0, 0, 0, 0.2)}.rux-modal__titlebar{display:flex;flex-grow:0;flex-shrink:0;align-items:center;width:100%;padding:16px 20px;background-color:var(--color-dialog-header);color:var(--modal-title-color);user-select:none;cursor:move;font-family:var(--font-heading-2-font-family);font-size:var(--font-heading-2-font-size);font-weight:var(--font-heading-2-font-weight);letter-spacing:var(--font-heading-2-letter-spacing)}.rux-modal__content{display:flex;flex-direction:column;flex-grow:1;padding:1rem;color:var(--color-default-text)}.rux-modal__message{margin:0.5rem 1.875rem 2.5rem 1.875rem}.rux-modal .rux-button{box-shadow:none !important}rux-icon{margin-right:0.75rem}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-moz-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-o-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-ms-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}";

const RuxModal$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    this.ruxModalClosed = createEvent(this, "ruxmodalclosed", 7);
    /**
     * Shows and hides modal
     */
    this.open = false;
    /**
     * Text for confirmation button
     */
    this.confirmText = 'Confirm';
    /**
     * Text for close button
     */
    this.denyText = 'Cancel';
  }
  // confirm dialog if Enter key is pressed
  handleKeyDown(ev) {
    if (ev.key === 'Enter') {
      const button = this._getDefaultButton();
      if (button) {
        button.click();
      }
    }
  }
  // close modal if click happens outside of dialog
  handleClick(ev) {
    const wrapper = this._getWrapper();
    if (ev.composedPath()[0] === wrapper) {
      this.ruxModalClosed.emit(false);
      this.open = false;
    }
  }
  validateName(isOpen) {
    if (isOpen) {
      setTimeout(() => {
        const button = this._getDefaultButton();
        button && button.focus();
      });
    }
  }
  _handleModalChoice(e) {
    // convert string value to boolean
    const target = e.currentTarget;
    const choice = target.dataset.value === 'true';
    this.ruxModalClosed.emit(choice);
    this.open = false;
  }
  _getDefaultButton() {
    var _a, _b;
    const buttonSet = (_b = (_a = this.element) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelectorAll('rux-button:not([hidden])');
    if (buttonSet.length > 0) {
      const defaultButton = buttonSet[buttonSet.length - 1];
      return defaultButton;
    }
    return null;
  }
  _getWrapper() {
    var _a, _b;
    const wrapper = (_b = (_a = this.element) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.rux-modal__wrapper');
    if (wrapper) {
      return wrapper;
    }
    return null;
  }
  connectedCallback() {
    setTimeout(() => {
      const button = this._getDefaultButton();
      button && button.focus();
    });
    this._handleModalChoice = this._handleModalChoice.bind(this);
  }
  componentDidLoad() {
    setTimeout(() => {
      const button = this._getDefaultButton();
      button && button.focus();
    });
  }
  render() {
    const { open, modalMessage, modalTitle, confirmText, denyText, _handleModalChoice, } = this;
    return (open && (h(Host, null, h("div", { part: "wrapper", class: "rux-modal__wrapper" }, h("dialog", { class: "rux-modal__dialog", role: "dialog" }, modalTitle && (h("header", { class: "rux-modal__titlebar" }, h("div", null, modalTitle))), h("div", { class: "rux-modal__content" }, h("div", { class: "rux-modal__message" }, modalMessage), h("rux-button-group", { "h-align": "right" }, h("rux-button", { secondary: confirmText.length > 0, onClick: _handleModalChoice, "data-value": "false", hidden: !denyText, tabindex: "-1" }, denyText), h("rux-button", { onClick: _handleModalChoice, "data-value": "true", hidden: !confirmText, tabindex: "0" }, confirmText))))))));
  }
  get element() { return this; }
  static get watchers() { return {
    "open": ["validateName"]
  }; }
  static get style() { return ruxModalCss; }
};

const RuxModal = /*@__PURE__*/proxyCustomElement(RuxModal$1, [1,"rux-modal",{"open":[1540],"modalMessage":[1,"modal-message"],"modalTitle":[1,"modal-title"],"confirmText":[1,"confirm-text"],"denyText":[1,"deny-text"]},[[8,"keydown","handleKeyDown"],[8,"click","handleClick"]]]);

export { RuxModal };
