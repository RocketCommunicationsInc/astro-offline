import { attachShadow, createEvent, h, Host, proxyCustomElement } from '@stencil/core/internal/client';
import { a as hasSlot, r as renderHiddenInput } from './utils.js';

const ruxSwitchCss = ".rux-help-text{margin-top:0.625rem;color:var(--color-default-text);font-size:var(--font-body-2-font-size);font-family:var(--font-body-2-font-family);font-weight:var(--font-body-2-font-weight);letter-spacing:var(--font-body-2-letter-spacing)}.rux-error-text{padding-left:1.625rem;background-image:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20128%20128%22%3E%0A%20%20%3Cpath%20fill%3D%22%23FF3030%22%20fill-rule%3D%22evenodd%22%20d%3D%22M64.031%205c8.461%200%2068.88%20107.243%2063.648%20114.184-5.232%206.942-120.805%205.477-127.212%200C-5.941%20113.708%2055.57%205%2064.03%205zm3.45%2075.894l1.822-34.893H56.946l1.82%2034.893h8.715zM56.803%2093.108c0%201.929.547%203.423%201.643%204.483%201.095%201.06%202.642%201.589%204.642%201.589%201.953%200%203.477-.542%204.572-1.625%201.095-1.084%201.643-2.566%201.643-4.447%200-1.952-.542-3.452-1.625-4.5-1.084-1.047-2.613-1.571-4.59-1.571-2.047%200-3.607.512-4.678%201.536-1.072%201.023-1.607%202.535-1.607%204.535z%22%2F%3E%0A%3C%2Fsvg%3E);background-repeat:no-repeat;background-size:1rem;background-position:center left 0rem;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--color-status-critical-fill);font-size:var(--font-body-2-bold-font-size);font-family:var(--font-body-2-bold-font-family);font-weight:var(--font-body-2-bold-font-weight);letter-spacing:var(--font-body-2-bold-letter-spacing)}:host{display:block;--switch-background-color:var(--color-background);--switch-hover-on-color:var(--color-primary);--switch-hover-off-color:var(--color-primary);--switch-on-color:var(--color-primary);--switch-off-border-color:var(--color-active);padding-left:1%}.rux-switch{position:relative;display:flex;height:22px;width:42px}.rux-switch__button{display:flex;align-items:center;cursor:pointer}.rux-switch__button::before{position:relative;display:flex;content:\"\";border-radius:var(--switch-radius-track);border:1px solid;border-color:var(--switch-off-border-color);background-color:var(--switch-background-color);height:10px;width:30px;z-index:2;transition:0.1s background-color linear}.rux-switch__button::after{position:absolute;content:\"\";top:1px;left:-4px;z-index:3;height:18px;width:18px;border-radius:var(--radius-circle);border:1px solid var(--switch-hover-off-color);background-color:var(--switch-background-color);transition:0.1s left linear, 0.1s border-color linear}.rux-switch__input{appearance:none;-webkit-appearance:none;margin:0}.rux-switch__input:checked+.rux-switch__button::before{border-color:var(--switch-on-color);background-color:var(--switch-on-color)}.rux-switch__input:checked+.rux-switch__button::after{left:16px;background-color:var(--switch-background-color);border-color:var(--switch-hover-off-color)}.rux-switch__input:disabled+.rux-switch__button{cursor:not-allowed;opacity:var(--disabled-opacity)}.rux-switch:hover .rux-switch__input:not(:disabled)+.rux-switch__button::before,.rux-switch:hover .rux-switch__input:checked:not(:disabled)+.rux-switch__button::before{border-color:var(--switch-hover-off-color)}.rux-switch:hover .rux-switch__input:not(:disabled)+.rux-switch__button::after,.rux-switch:hover .rux-switch__input:checked:not(:disabled)+.rux-switch__button::after{border-color:var(--switch-hover-off-color)}.rux-switch:hover .rux-switch__input:not(:disabled)+.rux-switch__button::before{background-color:var(--switch-background-color)}.rux-switch:hover .rux-switch__input:checked:not(:disabled)+.rux-switch__button::before{background-color:var(--switch-hover-on-color)}.rux-switch__label{margin-left:0.75rem}.rux-form-field{display:flex;flex-direction:column;color:var(--color-default-text)}.hidden,:host([hidden]){display:none}";

let id = 0;
const RuxSwitch$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    this.ruxChange = createEvent(this, "ruxchange", 7);
    this.ruxInput = createEvent(this, "ruxinput", 7);
    this.ruxBlur = createEvent(this, "ruxblur", 7);
    this.switchId = `rux-switch-${++id}`;
    this.hasLabelSlot = false;
    /**
     * The switch name
     */
    this.name = '';
    /**
     * The switch value
     */
    this.value = '';
    /**
     * Toggles checked state of a switch
     */
    this.checked = false;
    /**
     * Disables the switch via HTML disabled attribute. Switch takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  handleLabelChange() {
    this._handleSlotChange();
  }
  componentWillLoad() {
    this._handleSlotChange();
  }
  connectedCallback() {
    this._onChange = this._onChange.bind(this);
    this._onInput = this._onInput.bind(this);
    this._handleSlotChange = this._handleSlotChange.bind(this);
  }
  disconnectedCallback() {
    this.el.shadowRoot.removeEventListener('slotchange', this._handleSlotChange);
  }
  get hasLabel() {
    return this.label ? true : this.hasLabelSlot;
  }
  _handleSlotChange() {
    this.hasLabelSlot = hasSlot(this.el, 'label');
  }
  _onChange(e) {
    const target = e.target;
    this.checked = target.checked;
    this.ruxChange.emit(this.checked);
  }
  _onInput(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxInput.emit();
  }
  render() {
    const { switchId, checked, disabled, name, value } = this;
    renderHiddenInput(true, this.el, this.name, this.value ? this.value : 'on', this.disabled, this.checked);
    return (h(Host, { class: "rux-form-field", "aria-checked": `${checked}`, "aria-hidden": disabled ? 'true' : null, role: "switch" }, h("div", { class: {
        'rux-switch': true,
      } }, h("input", { role: "switch", type: "checkbox", class: "rux-switch__input", name: name, id: switchId, disabled: disabled, checked: checked, value: value, "aria-checked": `${checked}`, onChange: this._onChange, onInput: this._onInput, onBlur: this._onBlur }), h("label", { class: "rux-switch__button", htmlFor: switchId }, h("span", { class: {
        'rux-switch__label': true,
        hidden: !this.hasLabel,
      } }, h("slot", { onSlotchange: this._handleSlotChange, name: "label" }, this.label))))));
  }
  get el() { return this; }
  static get watchers() { return {
    "label": ["handleLabelChange"]
  }; }
  static get style() { return ruxSwitchCss; }
};

const RuxSwitch = /*@__PURE__*/proxyCustomElement(RuxSwitch$1, [1,"rux-switch",{"name":[1],"value":[1537],"checked":[1540],"disabled":[516],"label":[1],"hasLabelSlot":[32]}]);

export { RuxSwitch };
