import { attachShadow, h, Host, proxyCustomElement } from '@stencil/core/internal/client';

const ruxLogCss = ":host{--log-header-background-color:var(--color-gsb-global-status-bar);--log-filter-background-color:var(--color-primary-alt);--log-filter-text-color:var(--color-inverse-text);display:block;overflow:hidden}:host([hidden]){display:none}rux-table{--table-header-background-color:var(--log-header-background-color)}.rux-log__header-event-cell{width:80%}.header-event-container{display:flex;align-items:center}.rux-log__filter{margin-left:auto}rux-table-header-cell{width:1%}.rux-log__notification{width:2000%;align-content:center;color:var(--log-filter-text-color);background-color:var(--log-filter-background-color);padding:0.5rem}";

const RuxLog$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    /**
     * An array of objects to display as log
     */
    this.data = [];
    /**
     * Accepts [IANA timezone string format](https://www.iana.org/time-zones) such as `America/Los_Angeles`. Default timezone is `UTC`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
     */
    this.timezone = 'UTC';
  }
  _setFilter(e) {
    this.filter = e.target.value;
  }
  get filteredData() {
    if (this.filter) {
      const filter = this.filter;
      return this.data.filter((row) => row.message.includes(filter));
    }
    else {
      return this.data;
    }
  }
  render() {
    return (h(Host, null, h("slot", { name: "table" }, h("rux-table", null, h("slot", { name: "table-header" }, h("rux-table-header", { class: "relative" }, h("slot", { name: "table-header-row" }, h("rux-table-header-row", null, h("rux-table-header-cell", null, "Time"), h("rux-table-header-cell", null), h("rux-table-header-cell", { class: "rux-log__header-event-cell" }, h("div", { class: "header-event-container" }, "Event", h("rux-input", { size: "small", class: "rux-log__filter", type: "search", onRuxinput: (event) => this._setFilter(event) }))))))), this.filter && (h("div", { class: "rux-log__notification", part: "log-notification" }, "A filter with ", h("b", null, this.filter), " is enabled.", ' ', this.data.length - this.filteredData.length, " of", ' ', this.data.length, " records are currently hidden.")), h("slot", { name: "table-body" }, h("rux-table-body", null, this.filteredData.map((row) => (h("rux-table-row", null, h("rux-table-cell", null, h("rux-datetime", { hour: "2-digit", "time-zone": this.timezone, minute: "2-digit", second: "2-digit", date: row.timestamp })), h("rux-table-cell", null, h("rux-status", { status: row.status })), h("rux-table-cell", null, row.message))))))))));
  }
  static get style() { return ruxLogCss; }
};

const RuxLog = /*@__PURE__*/proxyCustomElement(RuxLog$1, [1,"rux-log",{"data":[16],"timezone":[1],"filter":[1537]}]);

export { RuxLog };
