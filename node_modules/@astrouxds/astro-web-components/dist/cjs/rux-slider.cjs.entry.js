'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-7f00b6e7.js');
const FormFieldMessage = require('./FormFieldMessage-b610fbdd.js');
const utils = require('./utils-f4d54b8d.js');

const ruxSliderCss = ".rux-help-text{margin-top:0.625rem;color:var(--color-default-text);font-size:var(--font-body-2-font-size);font-family:var(--font-body-2-font-family);font-weight:var(--font-body-2-font-weight);letter-spacing:var(--font-body-2-letter-spacing)}.rux-error-text{padding-left:1.625rem;background-image:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20128%20128%22%3E%0A%20%20%3Cpath%20fill%3D%22%23FF3030%22%20fill-rule%3D%22evenodd%22%20d%3D%22M64.031%205c8.461%200%2068.88%20107.243%2063.648%20114.184-5.232%206.942-120.805%205.477-127.212%200C-5.941%20113.708%2055.57%205%2064.03%205zm3.45%2075.894l1.822-34.893H56.946l1.82%2034.893h8.715zM56.803%2093.108c0%201.929.547%203.423%201.643%204.483%201.095%201.06%202.642%201.589%204.642%201.589%201.953%200%203.477-.542%204.572-1.625%201.095-1.084%201.643-2.566%201.643-4.447%200-1.952-.542-3.452-1.625-4.5-1.084-1.047-2.613-1.571-4.59-1.571-2.047%200-3.607.512-4.678%201.536-1.072%201.023-1.607%202.535-1.607%204.535z%22%2F%3E%0A%3C%2Fsvg%3E);background-repeat:no-repeat;background-size:1rem;background-position:center left 0rem;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--color-status-critical-fill);font-size:var(--font-body-2-bold-font-size);font-family:var(--font-body-2-bold-font-family);font-weight:var(--font-body-2-bold-font-weight);letter-spacing:var(--font-body-2-bold-letter-spacing)}:host{--slider-thumb-background-color:var(--color-background);--slider-thumb-border-color:var(--color-primary);--slider-hover-thumb-background-color:var(--color-background);--slider-hover-thumb-border-color:var(--color-hover);--slider-track-background-color:var(--color-primary);--slider-selected-track-background-color:var(--color-primary);--slider-selected-thumb-border-color:var(--color-hover);--slider-thumb-size:19px;--slider-thumb-border-size:2px;--slider-value-percent:50%;--slider-top:calc(var(--slider-thumb-size) / -2.7);--slider-track-height:1px;--slider-track-before-thumb-height:5px;display:flex;flex-grow:1;flex-flow:column;cursor:pointer}.hidden,:host([hidden]){display:none}.rux-form-field{display:flex;flex-direction:column}.rux-form-field label{margin-bottom:var(--spacing-input-label-top)}.rux-slider{display:flex;height:20px}.rux-slider :hover{cursor:pointer}.rux-slider :disabled{cursor:not-allowed}.rux-range{-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none;appearance:none;background:none;width:100%;margin:0;color:transparent}input[type=range]:focus{outline:none}.rux-range::-webkit-slider-runnable-track{display:flex;align-items:center;max-width:100%;cursor:pointer;border-radius:2.5px;min-height:var(--slider-track-height);max-height:var(--slider-track-before-thumb-height);background-image:linear-gradient(var(--slider-track-background-color), var(--slider-track-background-color)), linear-gradient(var(--slider-track-background-color), var(--slider-track-background-color));background-size:var(--slider-value-percent) var(--slider-track-before-thumb-height), 100% var(--slider-track-height);background-repeat:no-repeat no-repeat;background-position:left, right}.rux-range:disabled::-webkit-slider-runnable-track{opacity:var(--disabled-opacity, 0.4);cursor:not-allowed}.rux-range::-moz-range-track{display:flex;align-items:center;max-width:100%;cursor:pointer;border-radius:2.5px;min-height:var(--slider-track-height);max-height:var(--slider-track-before-thumb-height);background-image:linear-gradient(var(--slider-track-background-color), var(--slider-track-background-color)), linear-gradient(var(--slider-track-background-color), var(--slider-track-background-color));background-size:calc(1 * var(--slider-value-percent)) var(--slider-track-before-thumb-height), 100% var(--slider-track-height);background-repeat:no-repeat no-repeat;background-position:left, right}.rux-range:disabled::-moz-range-track,.rux-range:disabled::-moz-range-progress{opacity:var(--disabled-opacity, 0.4);cursor:not-allowed}.rux-range::-moz-range-progress{background-color:var(--slider-selected-track-background-color)}.rux-input:disabled{opacity:var(--disabled-opacity, 0.4);cursor:not-allowed}.rux-range::-ms-track{display:flex;align-items:center;max-width:100%;cursor:pointer;border-radius:2.5px;min-height:var(--slider-track-height);max-height:5px;background-image:linear-gradient(var(--slider-track-background-color), var(--slider-track-background-color)), linear-gradient(var(--slider-track-background-color), var(--slider-track-background-color));background-size:var(--slider-value-percent) var(--slider-track-before-thumb-height), 100% var(--slider-track-height);background-repeat:no-repeat no-repeat;background-position:left, right}.rux-range::-ms-fill-lower{height:2px;background-color:#4dacff}.rux-range::-ms-fill-upper{height:2px;background-color:var(--slider-track-background-color)}.rux-range::-webkit-slider-thumb{-webkit-appearance:none;position:relative;top:var(--slider-top);height:var(--slider-thumb-size);width:var(--slider-thumb-size);border-radius:100%;border:var(--slider-thumb-border-size) solid var(--slider-thumb-border-color);background-color:var(--slider-thumb-background-color);cursor:pointer;z-index:6}.rux-range::-webkit-slider-thumb:hover{border-color:var(--slider-hover-thumb-border-color);background-color:var(--slider-hover-thumb-background-color)}.rux-range:disabled::-webkit-slider-thumb{cursor:not-allowed}.rux-range:disabled::-webkit-slider-thumb:hover{border-color:var(--slider-thumb-border-color)}.rux-range:not(:disabled)::-webkit-slider-thumb:active{border-color:var(--slider-selected-thumb-border-color);background-color:var(--color-background)}.rux-range:not(:disabled)::-webkit-slider-thumb:focus,.rux-range:not(:disabled)::-webkit-slider-thumb:hover:not(:active){background-color:var(--slider-hover-thumb-background-color)}.rux-range::-moz-range-thumb{-moz-appearance:none;position:relative;top:var(--slider-top);height:var(--slider-thumb-size);width:var(--slider-thumb-size);border-radius:100%;border:var(--slider-thumb-border-size) solid var(--slider-thumb-border-color);background-color:var(--slider-thumb-background-color);cursor:pointer}.rux-range:not(:disabled)::-moz-range-thumb:active{border-color:var(--slider-selected-thumb-border-color);background-color:var(--color-background)}.rux-range::-moz-range-thumb:hover{border-color:var(--slider-hover-thumb-border-color)}input:-moz-focusring{outline:none}.rux-range:disabled::-moz-range-thumb{opacity:var(--disabled-opacity, 0.4);cursor:not-allowed}.rux-range::-ms-thumb{position:relative;top:var(--slider-top);height:var(--slider-thumb-size);width:var(--slider-thumb-size);border-radius:100%;border:var(--slider-thumb-border-size) solid var(--slider-thumb-border-color);background-color:var(--slider-thumb-background-color);cursor:pointer;z-index:6}.rux-range:disabled::-ms-thumb{opacity:0.4;cursor:not-allowed}";

let id = 0;
const RuxSlider = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ruxInput = index.createEvent(this, "ruxinput", 7);
    this.ruxBlur = index.createEvent(this, "ruxblur", 7);
    this.sliderId = `rux-slider-${++id}`;
    this.hasLabelSlot = false;
    /**
     * Min value of the slider.
     */
    this.min = 0;
    /**
     * Max value of slider.
     */
    this.max = 100;
    /**
     * Step amount of slider value.
     */
    this.step = 1;
    /**
     * Current value of the slider. The default value is halfway between the specified minimum and maximum. - [HTMLElement/input_type_range>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range)
     */
    this.value = (this.max - this.min) / 2 + this.min;
    /**
     * Determines if the slider is disabled.
     */
    this.disabled = false;
    /**
     * Name of the Input Field for Form Submission
     */
    this.name = '';
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  componentWillLoad() {
    this._updateValue();
    this._getBrowser(navigator.userAgent.toLowerCase());
    this._handleSlotChange();
  }
  connectedCallback() {
    this._onInput = this._onInput.bind(this);
    this._onBlur = this._onBlur.bind(this);
    this._handleSlotChange = this._handleSlotChange.bind(this);
  }
  disconnectedCallback() {
    this.el.shadowRoot.removeEventListener('slotchange', this._handleSlotChange);
  }
  handleLabelChange() {
    this._handleSlotChange();
  }
  handleChange() {
    this._updateValue();
  }
  handleStep() {
    //? Value needs to be a multiple of step, otherwise slider begins to look wrong
    this.value = this._closestMultiple(this.value, this.step);
  }
  get hasLabel() {
    return this.label ? true : this.hasLabelSlot;
  }
  //Returns the closest multiple of two given numbers.
  _closestMultiple(n, x) {
    if (x > n)
      return x;
    n = n + x / 2;
    n = n - (n % x);
    return n;
  }
  _updateValue() {
    // If min is not a number, change it to 0
    if (!this.min && this.min != 0) {
      this.min = 0;
    }
    //If max is not a number, change it to 100
    if (!this.max && this.max != 0) {
      this.max = 100;
    }
    // If value is not a number, change it to default.
    if (!this.value && this.value != 0) {
      this.value = (this.max - this.min) / 2 + this.min;
    }
    //If step is not a number, change it to 1
    if (!this.step) {
      this.step = 1;
    }
    //Min can't be >= max
    if (this.min >= this.max) {
      this.min = this.max - this.step;
    }
    // If min is given and is greater than value, then set value to the min.
    if (this.value < this.min) {
      this.value = this.min;
    }
    //If max is given and is less than value, set value to max
    if (this.max < this.value) {
      this.value = this.max;
    }
    this._setValuePercent();
  }
  //Sets the --slider-value-percent CSS var
  _setValuePercent() {
    const dif = ((this.value - this.min) / (this.max - this.min)) * 100;
    this.el.style.setProperty('--slider-value-percent', `${dif}%`);
  }
  _onInput(e) {
    const target = e.target;
    this.value = parseInt(target.value);
    this._setValuePercent();
    this.ruxInput.emit();
  }
  //Safari needs 0px top for the thumb to look normal.
  _getBrowser(ua) {
    if (ua.indexOf('safari') > -1 && ua.indexOf('chrome') == -1) {
      this.el.style.setProperty('--slider-top', '0px');
    }
  }
  _handleSlotChange() {
    this.hasLabelSlot = utils.hasSlot(this.el, 'label');
  }
  render() {
    const { el, sliderId, label, min, max, value, step, disabled, name, _onInput, _onBlur, } = this;
    utils.renderHiddenInput(true, el, name, JSON.stringify(this.value), disabled);
    return (index.h(index.Host, null, index.h("div", { class: "rux-form-field", part: "form-field" }, index.h("label", { class: "rux-input-label", "aria-hidden": this.hasLabel ? 'false' : 'true', htmlFor: sliderId, part: "label" }, index.h("span", { class: { hidden: !this.hasLabel } }, index.h("slot", { name: "label" }, label))), index.h("div", { class: "rux-slider" }, index.h("input", { id: sliderId, onInput: _onInput, type: "range", class: "rux-range", min: min, max: max, value: value, step: step, disabled: disabled, "aria-label": "slider", "aria-disabled": disabled ? 'true' : 'false', onBlur: _onBlur }))), index.h(FormFieldMessage.FormFieldMessage, { helpText: this.helpText, errorText: this.errorText })));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "label": ["handleLabelChange"],
    "value": ["handleChange"],
    "min": ["handleChange"],
    "max": ["handleChange"],
    "step": ["handleStep"]
  }; }
};
RuxSlider.style = ruxSliderCss;

exports.rux_slider = RuxSlider;
