'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-7f00b6e7.js');

const ruxTabsCss = ":host{--tab-border-color:transparent;box-sizing:border-box;display:flex;justify-content:flex-start;font-family:var(--font-heading-2-font-family);font-size:var(--font-heading-2-font-size);letter-spacing:var(--font-heading-2-letter-spacing);font-weight:var(--font-heading-2-font-weight);min-height:5.625rem;height:100%;width:auto;margin:0;padding:0;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;contain:content;}:host([hidden]){display:none}:host([small]){font-family:var(--font-heading-5-font-family);font-size:var(--font-heading-5-font-size);letter-spacing:var(--font-heading-5-letter-spacing);font-weight:var(--font-heading-5-font-weight);min-height:3.125rem}";

const RuxTabs = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ruxSelected = index.createEvent(this, "ruxselected", 7);
    /**
     *  Holds all `<rux-tab-panel>` components based on the event emitted from the `<rux-tab-panels>` component.
     */
    this._panels = [];
    /**
     *  Holds all `<rux-tab>` components that are children of `<rux-tabs>`.
     */
    this._tabs = [];
  }
  handleListen(e) {
    this._registerPanels(e);
  }
  connectedCallback() {
    this._addTabs();
  }
  _addTabs() {
    this._tabs = Array.from(this.el.querySelectorAll('rux-tab'));
  }
  _registerPanels(e) {
    e.detail.forEach((panel) => {
      this._panels.push(panel);
    });
    // Default to first tab if none are selected
    const selectedTab = this._tabs.find((tab) => tab.selected) || this._tabs[0];
    this._setTab(selectedTab);
  }
  _onClick(e) {
    const tab = e.target;
    this.ruxSelected.emit(tab);
    if (tab.getAttribute('role') === 'tab' &&
      tab.getAttribute('disabled') === null) {
      this._setTab(tab);
    }
  }
  _reset() {
    // hide everything
    this._tabs.forEach((tab) => (tab.selected = false));
    //* classLIst on rux-tab-panel is an array of strings.
    this._panels.forEach((panel) => panel.classList.add('hidden'));
  }
  _setTab(selectedTab) {
    this._reset();
    // find the panel whose aria-labeldby attribute matches the tabâ€™s id
    const selectedPanel = this._panels.find((panel) => panel.getAttribute('aria-labelledby') ===
      selectedTab.getAttribute('id'));
    if (selectedTab)
      selectedTab.selected = true;
    if (selectedPanel)
      selectedPanel.classList.remove('hidden');
  }
  render() {
    return (index.h(index.Host, { onClick: (e) => this._onClick(e) }, index.h("slot", null)));
  }
  get el() { return index.getElement(this); }
};
RuxTabs.style = ruxTabsCss;

exports.rux_tabs = RuxTabs;
