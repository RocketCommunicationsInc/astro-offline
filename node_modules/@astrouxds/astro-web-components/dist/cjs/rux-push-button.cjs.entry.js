'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-7f00b6e7.js');
const utils = require('./utils-f4d54b8d.js');

const ruxPushButtonCss = ":host{cursor:pointer;display:block;--pushbutton-background-color:none;--pushbutton-border-color:var(--color-primary);--pushbutton-text-color:var(--color-primary);--pushbutton-selected-background-color:var(--color-status-normal-fill);--pushbutton-selected-border-color:var(--color-status-normal-fill);--pushbutton-selected-text-color:var(--color-global-tertiary-900);margin:0 2px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host[disabled]{opacity:var(--disabled-opacity);cursor:not-allowed}:host input{appearance:none;-webkit-appearance:none}:host .rux-push-button__button{font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);font-weight:var(--font-body-1-font-weight);letter-spacing:var(--font-body-1-letter-spacing);display:flex;justify-content:center;align-items:center;height:1.375rem;margin:-27px 0 0 0;color:var(--pushbutton-text-color);background-color:var(--pushbutton-background-color);border-radius:var(--radius-base);border:1px solid var(--pushbutton-border-color);padding:0.5rem 1rem}:host .rux-push-button__button--small{padding:0.25rem 1rem}:host .rux-push-button__button--large{padding:0.875rem 1rem}:host .rux-push-button__button:hover{cursor:pointer}:host .rux-push-button__button rux-icon{height:1rem;width:1rem;margin-right:0.75rem}:host .rux-push-button__button--icon-only{font-size:0 !important}:host .rux-push-button__button--icon-only rux-icon{margin-right:0}:host .rux-push-button__input:checked+.rux-push-button__button{display:flex;color:var(--pushbutton-selected-text-color);background-color:var(--pushbutton-selected-background-color);border-color:var(--pushbutton-selected-border-color)}:host .rux-push-button__input:checked+.rux-push-button__button rux-icon{color:var(--pushbutton-selected-text-color)}:host .rux-push-button__input:disabled+.rux-push-button__button{opacity:var(--disabled-opacity);cursor:not-allowed}:host([hidden]){display:none}";

const RuxPushButton = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ruxChange = index.createEvent(this, "ruxchange", 7);
    this.ruxBlur = index.createEvent(this, "ruxblur", 7);
    this.pushButtonId = `rux-push-button-${id++}`;
    /**
     * Hides slotted text from the button by setting rux-button--icon-only class
     */
    this.iconOnly = false;
    /**
     * Disables the push button via HTML `disabled` attribute.
     * Button takes on a distinct disabled visual state.
     * Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    /**
     * Checks the push button via HTML `checked` attribute.
     * Push button takes on a distinct "enabled" or "selected" visual state.
     */
    this.checked = false;
    /**
     * The label of the push button.
     */
    this.label = 'Push Button';
    /**
     * The name of the push button.
     */
    this.name = '';
    /**
     * The value of the push button.
     */
    this.value = '';
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  componentWillLoad() {
    this._onChange = this._onChange.bind(this);
  }
  _onChange(e) {
    const target = e.target;
    this.checked = target.checked;
    this.ruxChange.emit(this.checked);
  }
  render() {
    const { disabled, checked, label, size, _onChange, value, _onBlur, icon, iconOnly, } = this;
    utils.renderHiddenInput(true, this.el, this.name, this.value ? this.value : 'on', this.disabled, this.checked);
    return (index.h(index.Host, { "aria-checked": `${checked}`, "aria-hidden": disabled ? 'true' : null, role: "switch" }, index.h("input", { class: "rux-push-button__input", id: this.pushButtonId, type: "checkbox", disabled: disabled, checked: checked, onChange: _onChange, onBlur: _onBlur, value: value }), index.h("label", { class: {
        'rux-push-button__button': true,
        'rux-push-button__button--small': size === 'small',
        'rux-push-button__button--large': size === 'large',
        'rux-push-button__button--icon-only': iconOnly,
      }, htmlFor: this.pushButtonId }, icon ? (index.h("rux-icon", { size: "extra-small", icon: icon })) : null, label), index.h("slot", null)));
  }
  get el() { return index.getElement(this); }
};
let id = 0;
RuxPushButton.style = ruxPushButtonCss;

exports.rux_push_button = RuxPushButton;
