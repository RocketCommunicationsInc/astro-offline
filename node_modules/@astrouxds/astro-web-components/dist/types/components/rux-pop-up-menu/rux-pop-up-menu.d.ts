import { EventEmitter } from '../../stencil-public-runtime';
/**
 * @slot menu-end - Area below the menu list to insert elements. For example, confirmation and/or cancel button group.
 */
export declare class RuxPopUpMenu {
  el: HTMLRuxPopUpMenuElement;
  anchorBounds?: DOMRect;
  menuBounds?: DOMRect;
  /**
   * Optional element to trigger opening and closing of the menu.
   * If none is supplied the element where aria-controls === menu id will be assigned
   */
  triggerEl?: HTMLElement;
  /**
   * Element to anchor the menu to. If none is given the menu will anchor
   * to the trigger element where aria-controls === menu id
   */
  anchorEl?: HTMLElement;
  tieElements(): void;
  /**
   * Boolean which controls when to show the menu
   */
  open: boolean;
  openMenu(): void;
  /**
   * Emitted when the menu is about to open.
   */
  ruxMenuWillOpen: EventEmitter<void>;
  /**
   * Emitted when the menu is about to close
   */
  ruxMenuWillClose: EventEmitter<void>;
  /**
   * Emitted when the menu is open.
   */
  ruxMenuDidOpen: EventEmitter<void>;
  /**
   * Emitted when the menu is closed.
   */
  ruxMenuDidClose: EventEmitter<void>;
  componentDidRender(): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  /**
   * Returns 'true' if the menu is open, 'false' if it is not.
   */
  isOpen(): Promise<boolean>;
  /**
   * Opens the menu. If the menu is already open it returns 'false'.
   */
  show(): Promise<boolean>;
  /**
   * Closes the menu. If the menu is already closed it returns 'false'.
   */
  close(): Promise<boolean>;
  /**
   * Toggles the menu open or close. Will return 'true' on menu open and 'false' on menu close
   */
  toggle(): Promise<boolean>;
  handleListen(): void;
  private _bindElements;
  private _setMenuPosition;
  private _handleClick;
  private _handleOutsideClick;
  private _toggleOpenClose;
  render(): any;
}
