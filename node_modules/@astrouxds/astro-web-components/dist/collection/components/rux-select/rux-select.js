/* eslint react/jsx-no-bind: 0 */ // --> OFF
import { Component, Element, Host, h, Prop, Event, Watch, Listen, State, } from '@stencil/core';
import FormFieldMessage from '../../common/functional-components/FormFieldMessage/FormFieldMessage';
import { hasSlot, renderHiddenInput } from '../../utils/utils';
/**
 * @slot (default) - The select options
 * @slot label - The select label
 */
export class RuxSelect {
  constructor() {
    this.hasLabelSlot = false;
    /**
     * Disables the select menu via HTML disabled attribute. Select menu takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    /**
     * Sets the field as required
     */
    this.required = false;
    /**
     * Presentational only. Renders the Select Menu as invalid.
     */
    this.invalid = false;
    /**
     * Sets the Name of the Input Element
     */
    this.name = '';
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  onValueChange() {
    this._syncOptionsFromValue();
  }
  handleLabelChange() {
    this._handleLabelSlotChange();
  }
  handleGroupChange() {
    this._syncOptionsToNativeSelect();
  }
  handleOptionChange() {
    this._syncOptionsToNativeSelect();
  }
  connectedCallback() {
    this._handleSlotChange = this._handleSlotChange.bind(this);
    this._handleLabelSlotChange = this._handleLabelSlotChange.bind(this);
  }
  componentWillLoad() {
    this._handleLabelSlotChange();
    if (this.value) {
      this._handleSlotChange();
    }
  }
  get hasLabel() {
    return this.label ? true : this.hasLabelSlot;
  }
  _handleLabelSlotChange() {
    this.hasLabelSlot = hasSlot(this.el, 'label');
  }
  async _handleSlotChange() {
    await this._syncOptionsToNativeSelect();
    await this._syncOptionsFromValue();
  }
  /**
   * The native select element doesn't play nicely with slots. If an <option> isn't a direct child element, it won't render properly.
   * As a solution, we expose a slot outside the shadow-DOMed <select> and then manually copy the contents inside the shadow DOM.
   *
   * A RuxOptionGroup component is required because onSlotchange won't fire if we use the native <optgroup> and we change just its options.
   * RuxOptionGroup exists only to fire a change event that we can listen to.
   */
  _syncOptionsToNativeSelect() {
    var _a;
    const slot = (_a = this.slotContainer) === null || _a === void 0 ? void 0 : _a.querySelector('slot');
    if (slot) {
      this.selectEl.innerHTML = '';
      const assignedElements = slot.assignedElements({
        flatten: true,
      });
      assignedElements.map((item) => {
        const option = item;
        if (option.tagName.toLowerCase() === 'rux-option') {
          this._appendOptionToNativeSelect(option.label, option.value, this.selectEl);
        }
        if (option.tagName.toLowerCase() === 'rux-option-group') {
          const children = [
            ...Array.from(option.querySelectorAll('rux-option')),
          ];
          this._appendOptGroupToNativeSelect(option.label ? option.label : 'Group', children);
        }
      });
    }
    return Promise.resolve();
  }
  _appendOptGroupToNativeSelect(groupName, children) {
    const group = Object.assign(document.createElement('optgroup'), {
      label: groupName,
    });
    children.map((option) => {
      this._appendOptionToNativeSelect(option.label, option.value, group);
      this.selectEl.appendChild(group);
    });
    this.selectEl.appendChild(group);
  }
  _appendOptionToNativeSelect(label, value, target) {
    const item = Object.assign(document.createElement('option'), {
      innerHTML: label ? label : '',
      value: value,
    });
    target.appendChild(item);
  }
  _syncOptionsFromValue() {
    if (this.selectEl) {
      const options = [
        ...Array.from(this.selectEl.querySelectorAll('option')),
      ];
      options.map((option) => {
        option.selected = option.value === this.value;
      });
    }
    return Promise.resolve();
  }
  _onChange(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxSelectChanged.emit();
  }
  render() {
    const { disabled, required, label, inputId, labelId, invalid, name, } = this;
    renderHiddenInput(true, this.el, this.name, this.value, this.disabled);
    return (h(Host, null,
      h("label", { id: labelId, htmlFor: inputId, "aria-hidden": this.hasLabel ? 'false' : 'true' },
        h("span", { class: { hidden: !this.hasLabel } },
          h("slot", { onSlotchange: this._handleLabelSlotChange, name: "label" }, label))),
      h("select", { class: 'rux-select ' + (invalid ? 'rux-select-invalid' : ''), ref: (el) => (this.selectEl = el), id: inputId, disabled: disabled, required: required, name: name, onChange: (e) => this._onChange(e), onBlur: this._onBlur }),
      h("div", { "aria-hidden": "true", class: "hidden", ref: (el) => (this.slotContainer = el) },
        h("slot", { onSlotchange: this._handleSlotChange })),
      h(FormFieldMessage, { errorText: this.errorText, helpText: this.helpText })));
  }
  static get is() { return "rux-select"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rux-select.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["rux-select.css"]
  }; }
  static get properties() { return {
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Disables the select menu via HTML disabled attribute. Select menu takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored."
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets the field as required"
      },
      "attribute": "required",
      "reflect": true,
      "defaultValue": "false"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The select label text. For HTML content, use the `label` slot instead."
      },
      "attribute": "label",
      "reflect": false
    },
    "inputId": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Id for the Select Input"
      },
      "attribute": "input-id",
      "reflect": false
    },
    "labelId": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Id for the Label"
      },
      "attribute": "label-id",
      "reflect": false
    },
    "invalid": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Presentational only. Renders the Select Menu as invalid."
      },
      "attribute": "invalid",
      "reflect": true,
      "defaultValue": "false"
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets the Name of the Input Element"
      },
      "attribute": "name",
      "reflect": true,
      "defaultValue": "''"
    },
    "value": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The value of the selected option"
      },
      "attribute": "value",
      "reflect": true
    },
    "helpText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The help or explanation text"
      },
      "attribute": "help-text",
      "reflect": false
    },
    "errorText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The validation error text"
      },
      "attribute": "error-text",
      "reflect": false
    }
  }; }
  static get states() { return {
    "hasLabelSlot": {}
  }; }
  static get events() { return [{
      "method": "ruxSelectChanged",
      "name": "ruxchange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Event Emitted when the Value of the Select is Changed"
      },
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      }
    }, {
      "method": "ruxBlur",
      "name": "ruxblur",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "value",
      "methodName": "onValueChange"
    }, {
      "propName": "label",
      "methodName": "handleLabelChange"
    }]; }
  static get listeners() { return [{
      "name": "rux-option-group-changed",
      "method": "handleGroupChange",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "rux-option-changed",
      "method": "handleOptionChange",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
