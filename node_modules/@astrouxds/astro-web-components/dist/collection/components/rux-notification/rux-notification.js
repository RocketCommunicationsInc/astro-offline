/* eslint react/jsx-no-bind: 0 */ // --> OFF
import { Component, Event, Host, h, Prop, Watch, } from '@stencil/core';
export class RuxNotification {
  constructor() {
    /**
     *  Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).
     */
    this.open = false;
    /**
     *  Message for the notification banner.
     */
    this.message = '';
    /**
     *  The background color. Possible values include 'off', 'standby', 'normal', 'caution', 'serious' and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).
     */
    this.status = 'standby';
    this._timeoutRef = null;
  }
  watchHandler() {
    this._updated();
    if (!this.open) {
      this.ruxClosed.emit();
    }
  }
  connectedCallback() {
    this._updated();
  }
  _updated() {
    if (this._closeAfter && this.open) {
      this._timeoutRef = window.setTimeout(() => {
        this.open = false;
      }, this._closeAfter);
    }
  }
  _onClick() {
    if (this._timeoutRef) {
      clearTimeout(this._timeoutRef);
    }
    this.open = false;
  }
  get _closeAfter() {
    //* as long as it's less than 1000, they put in seconds. Convert that here.
    if (this.closeAfter && this.closeAfter <= 999) {
      //it's in seconds
      this.closeAfter *= 1000; // change into ms
    }
    if ((this.closeAfter && this.closeAfter > 10000) ||
      (this.closeAfter && this.closeAfter < 2000)) {
      // if this number is larger than 10s or smaller than 2s, enforce minimum 2s delay
      this.closeAfter = 2000;
    }
    return this.closeAfter;
  }
  render() {
    return (
    /**
     * Add a randomly generated class name when the banner is open
     * so that we can achieve backwards compatibility if anybody is
     * styling the host element.
     *
     * We shouldn't be changing the component's class because the developer
     * has full control of it and can easily override it. But by using
     * a random string, we reduce the chances of that happening unknowingly.
     */
    h(Host, { class: {
        'rux-notification-banner-0ba5409c--open': this.open,
      } },
      h("div", { class: "rux-notification__message" }, `${this.message}`),
      h("rux-icon", { role: "button", label: "Close notification", onClick: () => this._onClick(), icon: "close", size: "36px" })));
  }
  static get is() { return "rux-notification"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rux-notification.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["rux-notification.css"]
  }; }
  static get properties() { return {
    "open": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided)."
      },
      "attribute": "open",
      "reflect": true,
      "defaultValue": "false"
    },
    "message": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Message for the notification banner."
      },
      "attribute": "message",
      "reflect": false,
      "defaultValue": "''"
    },
    "status": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "Status",
        "resolved": "\"caution\" | \"critical\" | \"normal\" | \"off\" | \"serious\" | \"standby\"",
        "references": {
          "Status": {
            "location": "import",
            "path": "../../common/commonTypes.module"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The background color. Possible values include 'off', 'standby', 'normal', 'caution', 'serious' and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/)."
      },
      "attribute": "status",
      "reflect": true,
      "defaultValue": "'standby'"
    },
    "closeAfter": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "If provided, the banner will automatically close after this amount of time. Accepts value either in milliseconds or seconds (which will be converted to milliseconds internally), between `2000` and `10000`, or `2` and `10`, respectively. Any number provided outside of the `2000`-`10000` range will be ignored in favor of the default 2000ms delay. <br>If `closeAfter` is not passed or if it is given an undefined or `null` value, the banner will stay open until the user closes it."
      },
      "attribute": "close-after",
      "reflect": false
    }
  }; }
  static get events() { return [{
      "method": "ruxClosed",
      "name": "ruxclosed",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Fires when the notification banner is closed"
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }]; }
  static get watchers() { return [{
      "propName": "open",
      "methodName": "watchHandler"
    }]; }
}
