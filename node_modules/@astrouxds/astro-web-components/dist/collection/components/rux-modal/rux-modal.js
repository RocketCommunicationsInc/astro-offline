import { Component, h, Prop, Event, Element, Listen, Watch, Host, } from '@stencil/core';
/**
 * @part wrapper - the modal wrapper overlay
 *
 */
export class RuxModal {
  constructor() {
    /**
     * Shows and hides modal
     */
    this.open = false;
    /**
     * Text for confirmation button
     */
    this.confirmText = 'Confirm';
    /**
     * Text for close button
     */
    this.denyText = 'Cancel';
  }
  // confirm dialog if Enter key is pressed
  handleKeyDown(ev) {
    if (ev.key === 'Enter') {
      const button = this._getDefaultButton();
      if (button) {
        button.click();
      }
    }
  }
  // close modal if click happens outside of dialog
  handleClick(ev) {
    const wrapper = this._getWrapper();
    if (ev.composedPath()[0] === wrapper) {
      this.ruxModalClosed.emit(false);
      this.open = false;
    }
  }
  validateName(isOpen) {
    if (isOpen) {
      setTimeout(() => {
        const button = this._getDefaultButton();
        button && button.focus();
      });
    }
  }
  _handleModalChoice(e) {
    // convert string value to boolean
    const target = e.currentTarget;
    const choice = target.dataset.value === 'true';
    this.ruxModalClosed.emit(choice);
    this.open = false;
  }
  _getDefaultButton() {
    var _a, _b;
    const buttonSet = (_b = (_a = this.element) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelectorAll('rux-button:not([hidden])');
    if (buttonSet.length > 0) {
      const defaultButton = buttonSet[buttonSet.length - 1];
      return defaultButton;
    }
    return null;
  }
  _getWrapper() {
    var _a, _b;
    const wrapper = (_b = (_a = this.element) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.rux-modal__wrapper');
    if (wrapper) {
      return wrapper;
    }
    return null;
  }
  connectedCallback() {
    setTimeout(() => {
      const button = this._getDefaultButton();
      button && button.focus();
    });
    this._handleModalChoice = this._handleModalChoice.bind(this);
  }
  componentDidLoad() {
    setTimeout(() => {
      const button = this._getDefaultButton();
      button && button.focus();
    });
  }
  render() {
    const { open, modalMessage, modalTitle, confirmText, denyText, _handleModalChoice, } = this;
    return (open && (h(Host, null,
      h("div", { part: "wrapper", class: "rux-modal__wrapper" },
        h("dialog", { class: "rux-modal__dialog", role: "dialog" },
          modalTitle && (h("header", { class: "rux-modal__titlebar" },
            h("div", null, modalTitle))),
          h("div", { class: "rux-modal__content" },
            h("div", { class: "rux-modal__message" }, modalMessage),
            h("rux-button-group", { "h-align": "right" },
              h("rux-button", { secondary: confirmText.length > 0, onClick: _handleModalChoice, "data-value": "false", hidden: !denyText, tabindex: "-1" }, denyText),
              h("rux-button", { onClick: _handleModalChoice, "data-value": "true", hidden: !confirmText, tabindex: "0" }, confirmText))))))));
  }
  static get is() { return "rux-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rux-modal.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["rux-modal.css"]
  }; }
  static get properties() { return {
    "open": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Shows and hides modal"
      },
      "attribute": "open",
      "reflect": true,
      "defaultValue": "false"
    },
    "modalMessage": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Modal body message"
      },
      "attribute": "modal-message",
      "reflect": false
    },
    "modalTitle": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Modal header title"
      },
      "attribute": "modal-title",
      "reflect": false
    },
    "confirmText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Text for confirmation button"
      },
      "attribute": "confirm-text",
      "reflect": false,
      "defaultValue": "'Confirm'"
    },
    "denyText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Text for close button"
      },
      "attribute": "deny-text",
      "reflect": false,
      "defaultValue": "'Cancel'"
    }
  }; }
  static get events() { return [{
      "method": "ruxModalClosed",
      "name": "ruxmodalclosed",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Event that is fired when modal closes"
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }]; }
  static get elementRef() { return "element"; }
  static get watchers() { return [{
      "propName": "open",
      "methodName": "validateName"
    }]; }
  static get listeners() { return [{
      "name": "keydown",
      "method": "handleKeyDown",
      "target": "window",
      "capture": false,
      "passive": false
    }, {
      "name": "click",
      "method": "handleClick",
      "target": "window",
      "capture": false,
      "passive": false
    }]; }
}
