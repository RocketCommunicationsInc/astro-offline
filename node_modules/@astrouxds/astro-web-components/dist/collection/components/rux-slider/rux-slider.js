import { Component, h, Prop, Element, Host, Event, Watch, State, } from '@stencil/core';
import FormFieldMessage from '../../common/functional-components/FormFieldMessage/FormFieldMessage';
import { hasSlot, renderHiddenInput } from '../../utils/utils';
let id = 0;
/**
 * @slot label - The slider label
 * @part form-field - The form-field wrapper container
 * @part label - The input label when `label` prop is set
 */
export class RuxSlider {
  constructor() {
    this.sliderId = `rux-slider-${++id}`;
    this.hasLabelSlot = false;
    /**
     * Min value of the slider.
     */
    this.min = 0;
    /**
     * Max value of slider.
     */
    this.max = 100;
    /**
     * Step amount of slider value.
     */
    this.step = 1;
    /**
     * Current value of the slider. The default value is halfway between the specified minimum and maximum. - [HTMLElement/input_type_range>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range)
     */
    this.value = (this.max - this.min) / 2 + this.min;
    /**
     * Determines if the slider is disabled.
     */
    this.disabled = false;
    /**
     * Name of the Input Field for Form Submission
     */
    this.name = '';
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  componentWillLoad() {
    this._updateValue();
    this._getBrowser(navigator.userAgent.toLowerCase());
    this._handleSlotChange();
  }
  connectedCallback() {
    this._onInput = this._onInput.bind(this);
    this._onBlur = this._onBlur.bind(this);
    this._handleSlotChange = this._handleSlotChange.bind(this);
  }
  disconnectedCallback() {
    this.el.shadowRoot.removeEventListener('slotchange', this._handleSlotChange);
  }
  handleLabelChange() {
    this._handleSlotChange();
  }
  handleChange() {
    this._updateValue();
  }
  handleStep() {
    //? Value needs to be a multiple of step, otherwise slider begins to look wrong
    this.value = this._closestMultiple(this.value, this.step);
  }
  get hasLabel() {
    return this.label ? true : this.hasLabelSlot;
  }
  //Returns the closest multiple of two given numbers.
  _closestMultiple(n, x) {
    if (x > n)
      return x;
    n = n + x / 2;
    n = n - (n % x);
    return n;
  }
  _updateValue() {
    // If min is not a number, change it to 0
    if (!this.min && this.min != 0) {
      this.min = 0;
    }
    //If max is not a number, change it to 100
    if (!this.max && this.max != 0) {
      this.max = 100;
    }
    // If value is not a number, change it to default.
    if (!this.value && this.value != 0) {
      this.value = (this.max - this.min) / 2 + this.min;
    }
    //If step is not a number, change it to 1
    if (!this.step) {
      this.step = 1;
    }
    //Min can't be >= max
    if (this.min >= this.max) {
      this.min = this.max - this.step;
    }
    // If min is given and is greater than value, then set value to the min.
    if (this.value < this.min) {
      this.value = this.min;
    }
    //If max is given and is less than value, set value to max
    if (this.max < this.value) {
      this.value = this.max;
    }
    this._setValuePercent();
  }
  //Sets the --slider-value-percent CSS var
  _setValuePercent() {
    const dif = ((this.value - this.min) / (this.max - this.min)) * 100;
    this.el.style.setProperty('--slider-value-percent', `${dif}%`);
  }
  _onInput(e) {
    const target = e.target;
    this.value = parseInt(target.value);
    this._setValuePercent();
    this.ruxInput.emit();
  }
  //Safari needs 0px top for the thumb to look normal.
  _getBrowser(ua) {
    if (ua.indexOf('safari') > -1 && ua.indexOf('chrome') == -1) {
      this.el.style.setProperty('--slider-top', '0px');
    }
  }
  _handleSlotChange() {
    this.hasLabelSlot = hasSlot(this.el, 'label');
  }
  render() {
    const { el, sliderId, label, min, max, value, step, disabled, name, _onInput, _onBlur, } = this;
    renderHiddenInput(true, el, name, JSON.stringify(this.value), disabled);
    return (h(Host, null,
      h("div", { class: "rux-form-field", part: "form-field" },
        h("label", { class: "rux-input-label", "aria-hidden": this.hasLabel ? 'false' : 'true', htmlFor: sliderId, part: "label" },
          h("span", { class: { hidden: !this.hasLabel } },
            h("slot", { name: "label" }, label))),
        h("div", { class: "rux-slider" },
          h("input", { id: sliderId, onInput: _onInput, type: "range", class: "rux-range", min: min, max: max, value: value, step: step, disabled: disabled, "aria-label": "slider", "aria-disabled": disabled ? 'true' : 'false', onBlur: _onBlur }))),
      h(FormFieldMessage, { helpText: this.helpText, errorText: this.errorText })));
  }
  static get is() { return "rux-slider"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rux-slider.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["rux-slider.css"]
  }; }
  static get properties() { return {
    "min": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Min value of the slider."
      },
      "attribute": "min",
      "reflect": false,
      "defaultValue": "0"
    },
    "max": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Max value of slider."
      },
      "attribute": "max",
      "reflect": false,
      "defaultValue": "100"
    },
    "step": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Step amount of slider value."
      },
      "attribute": "step",
      "reflect": false,
      "defaultValue": "1"
    },
    "value": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Current value of the slider. The default value is halfway between the specified minimum and maximum. - [HTMLElement/input_type_range>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range)"
      },
      "attribute": "value",
      "reflect": false,
      "defaultValue": "(this.max! - this.min!) / 2 + this.min!"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Determines if the slider is disabled."
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Name of the Input Field for Form Submission"
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "''"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The slider label text. For HTML content, use the `label` slot instead."
      },
      "attribute": "label",
      "reflect": false
    },
    "helpText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The help or explanation text"
      },
      "attribute": "help-text",
      "reflect": false
    },
    "errorText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The validation error text"
      },
      "attribute": "error-text",
      "reflect": false
    }
  }; }
  static get states() { return {
    "hasLabelSlot": {}
  }; }
  static get events() { return [{
      "method": "ruxInput",
      "name": "ruxinput",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "ruxBlur",
      "name": "ruxblur",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "label",
      "methodName": "handleLabelChange"
    }, {
      "propName": "value",
      "methodName": "handleChange"
    }, {
      "propName": "min",
      "methodName": "handleChange"
    }, {
      "propName": "max",
      "methodName": "handleChange"
    }, {
      "propName": "step",
      "methodName": "handleStep"
    }]; }
}
