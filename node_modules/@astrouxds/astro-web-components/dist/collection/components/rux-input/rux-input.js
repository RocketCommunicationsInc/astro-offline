import { Prop, Host, Component, Event, h, Element, State, Watch, } from '@stencil/core';
import FormFieldMessage from '../../common/functional-components/FormFieldMessage/FormFieldMessage';
import { hasSlot, renderHiddenInput } from '../../utils/utils';
let id = 0;
/**
 * @slot label - The input label
 * @part form-field - The form-field wrapper container
 * @part label - The input label when `label` prop is set
 * @part icon - The icon displayed when toggle-password prop is set
 */
export class RuxInput {
  constructor() {
    this.inputId = `rux-input-${++id}`;
    this.hasLabelSlot = false;
    this.togglePassword = false;
    this.isPasswordVisible = false;
    this.iconName = 'visibility';
    /**
     * Presentational only. Renders the Input Field as invalid.
     */
    this.invalid = false;
    /**
     * The input value
     */
    this.value = '';
    /**
     * The input name
     */
    this.name = '';
    /**
     * The input type
     */
    this.type = 'text';
    /**
     * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    /**
     * Sets the input as disabled
     */
    this.required = false;
    /**
     * Control the padding around the input field
     */
    this.size = 'medium';
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  handleLabelChange() {
    this._handleSlotChange();
  }
  handleTypeChange() {
    this._setTogglePassword();
  }
  connectedCallback() {
    this._onChange = this._onChange.bind(this);
    this._onInput = this._onInput.bind(this);
    this._handleSlotChange = this._handleSlotChange.bind(this);
    this._handleType = this._handleType.bind(this);
    this._handleTogglePassword = this._handleTogglePassword.bind(this);
  }
  disconnectedCallback() {
    this.el.shadowRoot.removeEventListener('slotchange', this._handleSlotChange);
  }
  componentWillLoad() {
    this._handleSlotChange();
    this._setTogglePassword();
  }
  get hasLabel() {
    return this.label ? true : this.hasLabelSlot;
  }
  _onChange(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxChange.emit();
  }
  _onInput(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxInput.emit();
  }
  _handleSlotChange() {
    this.hasLabelSlot = hasSlot(this.el, 'label');
  }
  _setTogglePassword() {
    if (this.type === 'password') {
      this.togglePassword = true;
    }
  }
  _handleTogglePassword() {
    this.isPasswordVisible = !this.isPasswordVisible;
    if (this.isPasswordVisible) {
      this.iconName = 'visibility-off';
    }
    else {
      this.iconName = 'visibility';
    }
  }
  _handleType() {
    let realType = '';
    !this.togglePassword
      ? (realType = this.type)
      : this.togglePassword && this.isPasswordVisible
        ? (realType = 'text')
        : (realType = this.type);
    return realType;
  }
  render() {
    const { disabled, el, errorText, helpText, inputId, invalid, label, max, min, name, _onChange, _onInput, _onBlur, _handleType, _handleSlotChange, _handleTogglePassword, placeholder, required, step, type, value, hasLabel, iconName, size, } = this;
    renderHiddenInput(true, el, name, value, disabled);
    return (h(Host, null,
      h("div", { class: "rux-form-field", part: "form-field" },
        h("label", { class: {
            'rux-input-label': true,
          }, part: "label", "aria-hidden": hasLabel ? 'false' : 'true', htmlFor: inputId },
          h("span", { class: {
              hidden: !hasLabel,
            } },
            h("slot", { name: "label", onSlotchange: _handleSlotChange },
              label,
              required && (h("span", { class: "rux-input-label__asterisk" }, "*"))))),
        h("input", { name: name, disabled: disabled, type: _handleType(), "aria-invalid": invalid ? 'true' : 'false', placeholder: placeholder, required: required, step: step, min: min, max: max, value: value, class: {
            'rux-input': true,
            'rux-input--disabled': disabled,
            'rux-input--invalid': invalid,
            'rux-input--search': type === 'search',
            'rux-input--small': size === 'small',
            'rux-input--medium': size === 'medium',
            'rux-input--large': size === 'large',
          }, id: this.inputId, autoComplete: this.togglePassword ? 'off' : 'on', onChange: _onChange, onInput: _onInput, onBlur: _onBlur }),
        this.togglePassword && (h("div", { class: {
            'icon-container': true,
            'show-password': true,
            'with-label': hasLabel,
          } },
          h("rux-icon", { part: "icon", onClick: _handleTogglePassword, icon: iconName, size: "extra-small" })))),
      h(FormFieldMessage, { errorText: errorText, helpText: helpText })));
  }
  static get is() { return "rux-input"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rux-input.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["rux-input.css"]
  }; }
  static get properties() { return {
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The input label text. For HTML content, use the `label` slot instead."
      },
      "attribute": "label",
      "reflect": false
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The input placeholder text"
      },
      "attribute": "placeholder",
      "reflect": false
    },
    "helpText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The help or explanation text"
      },
      "attribute": "help-text",
      "reflect": false
    },
    "errorText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The validation error text"
      },
      "attribute": "error-text",
      "reflect": false
    },
    "invalid": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Presentational only. Renders the Input Field as invalid."
      },
      "attribute": "invalid",
      "reflect": false,
      "defaultValue": "false"
    },
    "value": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input value"
      },
      "attribute": "value",
      "reflect": true,
      "defaultValue": "''"
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input name"
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "''"
    },
    "type": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "| 'text'\n        | 'number'\n        | 'email'\n        | 'url'\n        | 'search'\n        | 'password'\n        | 'tel'",
        "resolved": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input type"
      },
      "attribute": "type",
      "reflect": false,
      "defaultValue": "'text'"
    },
    "min": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The input min attribute"
      },
      "attribute": "min",
      "reflect": false
    },
    "max": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The input max attribute"
      },
      "attribute": "max",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored."
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets the input as disabled"
      },
      "attribute": "required",
      "reflect": false,
      "defaultValue": "false"
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'small' | 'medium' | 'large'",
        "resolved": "\"large\" | \"medium\" | \"small\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Control the padding around the input field"
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'medium'"
    },
    "step": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The input step attribute"
      },
      "attribute": "step",
      "reflect": false
    }
  }; }
  static get states() { return {
    "hasLabelSlot": {},
    "togglePassword": {},
    "isPasswordVisible": {},
    "iconName": {}
  }; }
  static get events() { return [{
      "method": "ruxChange",
      "name": "ruxchange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "ruxInput",
      "name": "ruxinput",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "ruxBlur",
      "name": "ruxblur",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "label",
      "methodName": "handleLabelChange"
    }, {
      "propName": "type",
      "methodName": "handleTypeChange"
    }]; }
}
