import { Watch, Prop, State, Component, Host, h } from '@stencil/core';
import { getDayOfYear } from 'date-fns';
import { format, utcToZonedTime } from 'date-fns-tz';
import { militaryTimezones } from './military-timezones';
export class RuxClock {
  constructor() {
    this._timezone = 'UTC';
    this.tzFormat = 'z';
    /**
     * Accepts the [IANA timezone string format](https://www.iana.org/time-zones) such as `'America/Los_Angeles'` or any single-character designation for a [military timezones](https://en.wikipedia.org/wiki/List_of_military_time_zones) (`'A'` through `'Z'`, excluding `'J'`), both case-insensitive. If no value for timezone is provided, the clock will use `'UTC'`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
     */
    this.timezone = 'UTC';
    /**
     * Hides the timezone in the main 24-hour clock. Timezone does not display on AOS/LOS.
     */
    this.hideTimezone = false;
    /**
     * Hides the day of the year.
     */
    this.hideDate = false;
    /**
     * Hides all of the labels.
     */
    this.hideLabels = false;
    /**
     * Applies a smaller clock style.
     */
    this.small = false;
  }
  updateAos(newValue) {
    this.convertedAos = this._formatLosAos(newValue);
  }
  updateLos(newValue) {
    this.convertedLos = this._formatLosAos(newValue);
  }
  timezoneChanged() {
    this._convertTimezone(this.timezone);
    if (this.aos)
      this.convertedAos = this._formatLosAos(this.aos);
    if (this.los)
      this.convertedLos = this._formatLosAos(this.los);
    this._updateTime();
  }
  get time() {
    return this._time;
  }
  connectedCallback() {
    this._convertTimezone(this.timezone);
    this._timer = window.setInterval(() => {
      this._updateTime();
    }, 1000);
    if (this.aos)
      this.convertedAos = this._formatLosAos(this.aos);
    if (this.los)
      this.convertedLos = this._formatLosAos(this.los);
  }
  disconnectedCallback() {
    clearTimeout(this._timer);
  }
  componentWillLoad() {
    this._timezone = this.timezone;
    this._convertTimezone(this.timezone);
    this._updateTime();
  }
  _formatTime(time, timezone) {
    return format(utcToZonedTime(time, timezone), `HH:mm:ss ${this.hideTimezone ? '' : this.tzFormat}`, { timeZone: timezone });
  }
  _updateTime() {
    this._time = this._formatTime(new Date(Date.now()), this._timezone);
    /**
     * Date.now() is a unix timestamp of the current time in UTC
     * We need to convert that to the Clock's defined timezone
     * before we get the day of the year.
     */
    const localDate = new Date(Date.now());
    const clockDate = utcToZonedTime(localDate, this._timezone);
    this.dayOfYear = getDayOfYear(clockDate);
  }
  /**
   * @param dateTime A date string in unix or ISO formats
   * @returns A timezone local ISO formatted 24h time string
   */
  _formatLosAos(dateTime) {
    // Check for unix timestamp
    if (new Date(Number(dateTime)).getTime() > 0) {
      dateTime = Number(dateTime);
    }
    return format(utcToZonedTime(dateTime, this._timezone), 'HH:mm:ss');
  }
  _convertTimezone(timezone) {
    const _militaryTimezones = militaryTimezones;
    this._timezone = _militaryTimezones[timezone.toUpperCase()];
    this.tzFormat = 'O';
    if (!this._timezone) {
      this._timezone = timezone;
      this.tzFormat = 'zzz';
    }
    else if (timezone.toUpperCase() == 'Z') {
      this.tzFormat = 'X';
    }
  }
  render() {
    return (h(Host, null,
      !this.hideDate && (h("div", { class: "rux-clock__segment rux-clock__day-of-the-year" },
        h("div", { class: "rux-clock__segment__value", "aria-labelledby": "rux-clock__day-of-year-label" }, this.dayOfYear),
        !this.hideLabels && (h("div", { class: "rux-clock__segment__label", id: "rux-clock__day-of-year-label" }, "Date")))),
      h("div", { class: "rux-clock__segment rux-clock__time" },
        h("div", { class: "rux-clock__segment__value", "aria-labelledby": "rux-clock__time-label" }, this.time),
        !this.hideLabels && (h("div", { class: "rux-clock__segment__label", id: "rux-clock__time-label" }, "Time"))),
      this.aos && (h("div", { class: "rux-clock__segment rux-clock__aos" },
        h("div", { class: "rux-clock__segment__value", "aria-labelledby": "rux-clock__time-label--aos", id: "rux-clock__time--aos" }, this.convertedAos),
        !this.hideLabels && (h("div", { class: "rux-clock__segment__label", id: "rux-clock__time-label--aos" }, "AOS")))),
      this.los && (h("div", { class: "rux-clock__segment rux-clock__los" },
        h("div", { class: "rux-clock__segment__value", "aria-labelledby": "rux-clock__time-label--los", id: "rux-clock__time--los" }, this.convertedLos),
        !this.hideLabels && (h("div", { class: "rux-clock__segment__label", id: "rux-clock__time-label--los" }, "LOS"))))));
  }
  static get is() { return "rux-clock"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rux-clock.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["rux-clock.css"]
  }; }
  static get properties() { return {
    "aos": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax) displays a timestamp labeled \"AOS\" next to the standard clock."
      },
      "attribute": "aos",
      "reflect": false
    },
    "los": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), displays a timestamp labeled \"LOS\" next to the standard clock."
      },
      "attribute": "los",
      "reflect": false
    },
    "timezone": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Accepts the [IANA timezone string format](https://www.iana.org/time-zones) such as `'America/Los_Angeles'` or any single-character designation for a [military timezones](https://en.wikipedia.org/wiki/List_of_military_time_zones) (`'A'` through `'Z'`, excluding `'J'`), both case-insensitive. If no value for timezone is provided, the clock will use `'UTC'`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details."
      },
      "attribute": "timezone",
      "reflect": false,
      "defaultValue": "'UTC'"
    },
    "hideTimezone": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Hides the timezone in the main 24-hour clock. Timezone does not display on AOS/LOS."
      },
      "attribute": "hide-timezone",
      "reflect": false,
      "defaultValue": "false"
    },
    "hideDate": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Hides the day of the year."
      },
      "attribute": "hide-date",
      "reflect": false,
      "defaultValue": "false"
    },
    "hideLabels": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Hides all of the labels."
      },
      "attribute": "hide-labels",
      "reflect": false,
      "defaultValue": "false"
    },
    "small": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Applies a smaller clock style."
      },
      "attribute": "small",
      "reflect": true,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "_time": {}
  }; }
  static get watchers() { return [{
      "propName": "aos",
      "methodName": "updateAos"
    }, {
      "propName": "los",
      "methodName": "updateLos"
    }, {
      "propName": "timezone",
      "methodName": "timezoneChanged"
    }]; }
}
