import { Prop, Host, Component, h, State, Element } from '@stencil/core';
import FormFieldMessage from '../../common/functional-components/FormFieldMessage/FormFieldMessage';
import { hasSlot } from '../../utils/utils';
/**
 * @slot (default) - The checkbox elements
 * @slot label - The checkbox group label
 * @part container - The container div of checkbox elements
 * @part form-field - The form-field wrapper container
 * @part label - The input label when `label` prop is set
 */
export class RuxCheckboxGroup {
  constructor() {
    this.hasLabelSlot = false;
    /**
     * Presentational only. Renders the Checkbox Group as invalid.
     */
    this.invalid = false;
  }
  connectedCallback() {
    this._handleSlotChange = this._handleSlotChange.bind(this);
  }
  disconnectedCallback() {
    this.el.shadowRoot.removeEventListener('slotchange', this._handleSlotChange);
  }
  componentWillLoad() {
    this._handleSlotChange();
  }
  get hasLabel() {
    return this.label ? true : this.hasLabelSlot;
  }
  _handleSlotChange() {
    this.hasLabelSlot = hasSlot(this.el, 'label');
  }
  render() {
    return (h(Host, null,
      h("div", { class: "rux-form-field", part: "form-field" },
        h("div", { class: {
            'rux-label': true,
            hidden: !this.hasLabel,
          }, part: "label" },
          h("slot", { onSlotchange: this._handleSlotChange, name: "label" }, this.label)),
        h("div", { class: {
            'rux-checkbox-group': true,
            'rux-checkbox-group--invalid': this.invalid,
          }, part: "container" },
          h("slot", null))),
      h(FormFieldMessage, { errorText: this.errorText, helpText: this.helpText })));
  }
  static get is() { return "rux-checkbox-group"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rux-checkbox-group.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["rux-checkbox-group.css"]
  }; }
  static get properties() { return {
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The label of the checkbox group. For HTML content, use the `label` slot instead."
      },
      "attribute": "label",
      "reflect": false
    },
    "helpText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The help or explanation text"
      },
      "attribute": "help-text",
      "reflect": false
    },
    "errorText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The validation error text"
      },
      "attribute": "error-text",
      "reflect": false
    },
    "invalid": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Presentational only. Renders the Checkbox Group as invalid."
      },
      "attribute": "invalid",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "hasLabelSlot": {}
  }; }
  static get elementRef() { return "el"; }
}
