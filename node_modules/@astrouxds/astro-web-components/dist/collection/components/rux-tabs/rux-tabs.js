/* eslint react/jsx-no-bind: 0 */ // --> OFF
import { Component, Host, h, State, Prop, Element, Listen, Event, } from '@stencil/core';
/**
 * @slot (default) - Used for instances of rux-tab
 */
export class RuxTabs {
  constructor() {
    /**
     *  Holds all `<rux-tab-panel>` components based on the event emitted from the `<rux-tab-panels>` component.
     */
    this._panels = [];
    /**
     *  Holds all `<rux-tab>` components that are children of `<rux-tabs>`.
     */
    this._tabs = [];
  }
  handleListen(e) {
    this._registerPanels(e);
  }
  connectedCallback() {
    this._addTabs();
  }
  _addTabs() {
    this._tabs = Array.from(this.el.querySelectorAll('rux-tab'));
  }
  _registerPanels(e) {
    e.detail.forEach((panel) => {
      this._panels.push(panel);
    });
    // Default to first tab if none are selected
    const selectedTab = this._tabs.find((tab) => tab.selected) || this._tabs[0];
    this._setTab(selectedTab);
  }
  _onClick(e) {
    const tab = e.target;
    this.ruxSelected.emit(tab);
    if (tab.getAttribute('role') === 'tab' &&
      tab.getAttribute('disabled') === null) {
      this._setTab(tab);
    }
  }
  _reset() {
    // hide everything
    this._tabs.forEach((tab) => (tab.selected = false));
    //* classLIst on rux-tab-panel is an array of strings.
    this._panels.forEach((panel) => panel.classList.add('hidden'));
  }
  _setTab(selectedTab) {
    this._reset();
    // find the panel whose aria-labeldby attribute matches the tabâ€™s id
    const selectedPanel = this._panels.find((panel) => panel.getAttribute('aria-labelledby') ===
      selectedTab.getAttribute('id'));
    if (selectedTab)
      selectedTab.selected = true;
    if (selectedPanel)
      selectedPanel.classList.remove('hidden');
  }
  render() {
    return (h(Host, { onClick: (e) => this._onClick(e) },
      h("slot", null)));
  }
  static get is() { return "rux-tabs"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rux-tabs.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["rux-tabs.css"]
  }; }
  static get properties() { return {
    "small": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses."
      },
      "attribute": "small",
      "reflect": false
    }
  }; }
  static get states() { return {
    "_panels": {},
    "_tabs": {}
  }; }
  static get events() { return [{
      "method": "ruxSelected",
      "name": "ruxselected",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Fires whenever a new tab is selected, and emits the selected tab."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "el"; }
  static get listeners() { return [{
      "name": "ruxregisterpanels",
      "method": "handleListen",
      "target": "window",
      "capture": false,
      "passive": false
    }]; }
}
