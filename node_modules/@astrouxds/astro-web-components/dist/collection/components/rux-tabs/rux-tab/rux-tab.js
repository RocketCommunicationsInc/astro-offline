import { Component, Host, h, Prop, Element } from '@stencil/core';
export class RuxTab {
  constructor() {
    /**
     *  If present, overrides which tab is selected on load / mount. By default, the first <rux-tab> item is selected.
     */
    this.selected = false;
    /**
     * If present, sets a disabled state on this tab item, indicating it cannot be selected by user action.
     */
    this.disabled = false;
  }
  connectedCallback() {
    var _a, _b;
    this.el.setAttribute('role', 'tab');
    this.el.addEventListener('click', this._clickHandler);
    if ((_b = (_a = this.el) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.getAttributeNode('small')) {
      this.el.setAttribute('small', '');
    }
  }
  _clickHandler(e) {
    if (this.disabled) {
      e.stopImmediatePropagation();
    }
  }
  render() {
    return (h(Host, { onClick: this._clickHandler },
      h("slot", null)));
  }
  static get is() { return "rux-tab"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rux-tab.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["rux-tab.css"]
  }; }
  static get properties() { return {
    "selected": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If present, overrides which tab is selected on load / mount. By default, the first <rux-tab> item is selected."
      },
      "attribute": "selected",
      "reflect": true,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If present, sets a disabled state on this tab item, indicating it cannot be selected by user action."
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    }
  }; }
  static get elementRef() { return "el"; }
}
