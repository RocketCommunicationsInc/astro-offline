import { Prop, Component, Host, h } from '@stencil/core';
import { AppMeta } from './appMeta/appMeta';
/**
 * @slot (default) - Used for any additional center content (RuxClock, RuxTabs, etc.)
 * @slot left-side - Used to prepend a RuxIcon or similar element
 * @slot app-meta - Used to display the Application's metadata (Domain, Name, State, Version, etc.)
 * @slot right-side - Used to append optional content
 */
export class RuxGlobalStatusBar {
  constructor() {
    /**
     * Declares whether the menu-icon will be shown in the left-side slot
     */
    this.includeIcon = false;
    /**
     * Declares what text will render and whether the app-state component will be shown in the app-meta slot
     */
    this.appState = '';
    /**
     * Declares the color of the the app-state component background
     */
    this.appStateColor = 'tag1';
    /**
     * Declares what text will render and whether the username component will be shown in the app-meta slot
     */
    this.username = '';
    /**
     * Sets the icon to be displayed in the default rux-icon component
     */
    this.menuIcon = 'apps';
  }
  render() {
    var _a, _b;
    const TagColor = {
      tag1: 'var(--color-global-tag-tag1-600)',
      tag2: 'var(--color-global-tag-tag2-600)',
      tag3: 'var(--color-global-tag-tag3-600)',
      tag4: 'var(--color-global-tag-tag4-600)',
    };
    return (h(Host, null,
      h("header", null,
        h("slot", { name: "left-side" }, this.includeIcon && (h("rux-icon", { icon: `${this.menuIcon}`, size: "small", class: this.appState || this.username
            ? 'shifted-up'
            : '' }))),
        h("slot", { name: "app-meta" }, (this.appDomain ||
          this.appName ||
          this.appVersion) && (h(AppMeta, { domain: (_a = this.appDomain) === null || _a === void 0 ? void 0 : _a.toUpperCase(), name: (_b = this.appName) === null || _b === void 0 ? void 0 : _b.toUpperCase(), version: this.appVersion },
          h("div", { class: "app-state-wrapper" },
            this.appState && (h("div", { class: "app-state", style: {
                backgroundColor: `${TagColor[this.appStateColor]}`,
              } }, this.appState)),
            this.username && (h("div", { class: "username" }, this.username)))))),
        h("div", { class: "slotted-content" },
          h("slot", null)),
        h("slot", { name: "right-side" }))));
  }
  static get is() { return "rux-global-status-bar"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rux-global-status-bar.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["rux-global-status-bar.css"]
  }; }
  static get properties() { return {
    "includeIcon": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Declares whether the menu-icon will be shown in the left-side slot"
      },
      "attribute": "include-icon",
      "reflect": false,
      "defaultValue": "false"
    },
    "appState": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Declares what text will render and whether the app-state component will be shown in the app-meta slot"
      },
      "attribute": "app-state",
      "reflect": false,
      "defaultValue": "''"
    },
    "appStateColor": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'tag1' | 'tag2' | 'tag3' | 'tag4'",
        "resolved": "\"tag1\" | \"tag2\" | \"tag3\" | \"tag4\" | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Declares the color of the the app-state component background"
      },
      "attribute": "app-state-color",
      "reflect": false,
      "defaultValue": "'tag1'"
    },
    "username": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Declares what text will render and whether the username component will be shown in the app-meta slot"
      },
      "attribute": "username",
      "reflect": false,
      "defaultValue": "''"
    },
    "appDomain": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the domain of the application to be displayed in the app-meta element"
      },
      "attribute": "app-domain",
      "reflect": false
    },
    "appName": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the name of the application to be displayed in the app-meta element"
      },
      "attribute": "app-name",
      "reflect": false
    },
    "appVersion": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the version of the application to be displayed in the app-meta element"
      },
      "attribute": "app-version",
      "reflect": false
    },
    "menuIcon": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets the icon to be displayed in the default rux-icon component"
      },
      "attribute": "menu-icon",
      "reflect": true,
      "defaultValue": "'apps'"
    }
  }; }
}
