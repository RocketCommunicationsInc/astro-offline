import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-01dd0ed8.js';
import { F as FormFieldMessage } from './FormFieldMessage-51640ee4.js';
import { h as hasSlot, r as renderHiddenInput } from './utils-0acfdbb3.js';

const ruxTextareaCss = ".rux-help-text{margin-top:0.625rem;color:var(--color-default-text);font-size:var(--font-body-2-font-size);font-family:var(--font-body-2-font-family);font-weight:var(--font-body-2-font-weight);letter-spacing:var(--font-body-2-letter-spacing)}.rux-error-text{padding-left:1.625rem;background-image:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20128%20128%22%3E%0A%20%20%3Cpath%20fill%3D%22%23FF3030%22%20fill-rule%3D%22evenodd%22%20d%3D%22M64.031%205c8.461%200%2068.88%20107.243%2063.648%20114.184-5.232%206.942-120.805%205.477-127.212%200C-5.941%20113.708%2055.57%205%2064.03%205zm3.45%2075.894l1.822-34.893H56.946l1.82%2034.893h8.715zM56.803%2093.108c0%201.929.547%203.423%201.643%204.483%201.095%201.06%202.642%201.589%204.642%201.589%201.953%200%203.477-.542%204.572-1.625%201.095-1.084%201.643-2.566%201.643-4.447%200-1.952-.542-3.452-1.625-4.5-1.084-1.047-2.613-1.571-4.59-1.571-2.047%200-3.607.512-4.678%201.536-1.072%201.023-1.607%202.535-1.607%204.535z%22%2F%3E%0A%3C%2Fsvg%3E);background-repeat:no-repeat;background-size:1rem;background-position:center left 0rem;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--color-status-critical-fill);font-size:var(--font-body-2-bold-font-size);font-family:var(--font-body-2-bold-font-family);font-weight:var(--font-body-2-bold-font-weight);letter-spacing:var(--font-body-2-bold-letter-spacing)}:host{--textarea-border-color:var(--color-active);--textarea-text-color:var(--color-default-text);--textarea-background-color:var(--color-background);--textarea-invalid-border-color:var(--color-status-critical-fill);--textarea-focus-border-color:var(--color-hover);--textarea-selection-background-color:var(--color-global-secondary-300);display:block}.hidden,:host([hidden]){display:none}.rux-textarea{box-sizing:border-box;-webkit-order:2;order:2;min-height:4.25rem;width:100%;padding:0.5rem;border:1px solid var(--textarea-border-color);border-radius:var(--radius-base);font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);letter-spacing:var(--font-body-1-letter-spacing);font-weight:var(--font-body-1-font-weight);color:var(--textarea-text-color);background-color:var(--textarea-background-color)}.rux-textarea--invalid{border:1px solid var(--textarea-invalid-border-color)}.rux-textarea--disabled{opacity:0.4;opacity:var(--disabled-opacity);cursor:not-allowed}.rux-textarea:focus{border-color:var(--textarea-focus-border-color);outline:none}.rux-textarea:hover{border-color:var(--textarea-focus-border-color);outline:none}.rux-textarea--disabled:hover{border:1px solid var(--textarea-border-color);color:var(--textarea-text-color)}.rux-textarea--invalid:hover{border:1px solid var(--textarea-invalid-border-color)}.rux-textarea::placeholder{color:var(--color-placeholder-text)}.rux-textarea-field{display:flex;flex-direction:column;color:var(--color-default-text)}.rux-textarea-label{font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);font-weight:var(--font-body-1-font-weight);letter-spacing:var(--font-body-1-letter-spacing);margin-bottom:var(--spacing-input-label-top)}::selection{background-color:var(--textarea-selection-background-color)}";

let id = 0;
const RuxTextarea = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ruxChange = createEvent(this, "ruxchange", 7);
    this.ruxInput = createEvent(this, "ruxinput", 7);
    this.ruxBlur = createEvent(this, "ruxblur", 7);
    this.inputId = `rux-textarea-${++id}`;
    this.hasLabelSlot = false;
    /**
     * Presentational only. Renders the Textarea as invalid.
     */
    this.invalid = false;
    /**
     * The input value
     */
    this.value = '';
    /**
     * The input name
     */
    this.name = '';
    /**
     * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    /**
     * Sets the input as disabled
     */
    this.required = false;
    /**
     * Styles the input element and label smaller for space-limited situations.
     */
    this.small = false;
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  handleLabelChange() {
    this._handleSlotChange();
  }
  connectedCallback() {
    this._onChange = this._onChange.bind(this);
    this._onInput = this._onInput.bind(this);
    this._handleSlotChange = this._handleSlotChange.bind(this);
  }
  disconnectedCallback() {
    this.el.shadowRoot.removeEventListener('slotchange', this._handleSlotChange);
  }
  componentWillLoad() {
    this._handleSlotChange();
  }
  get hasLabel() {
    return this.label ? true : this.hasLabelSlot;
  }
  _handleSlotChange() {
    this.hasLabelSlot = hasSlot(this.el, 'label');
  }
  _onChange(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxChange.emit();
  }
  _onInput(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxInput.emit();
  }
  render() {
    renderHiddenInput(true, this.el, this.name, this.value, this.disabled);
    return (h(Host, null, h("div", { class: "rux-textarea-field", part: "form-field" }, h("label", { class: {
        'rux-textarea-label': true,
      }, "aria-hidden": this.hasLabel ? 'false' : 'true', htmlFor: this.inputId, part: "label" }, h("span", { class: { hidden: !this.hasLabel } }, h("slot", { onSlotchange: this._handleSlotChange, name: "label" }, this.label))), h("textarea", { name: this.name, disabled: this.disabled, "aria-invalid": this.invalid ? 'true' : 'false', placeholder: this.placeholder, required: this.required, minlength: this.minLength, maxlength: this.maxLength, value: this.value, class: {
        'rux-textarea': true,
        'rux-textarea--disabled': this.disabled,
        'rux-textarea--invalid': this.invalid,
      }, id: this.inputId, rows: this.rows, onChange: this._onChange, onInput: this._onInput, onBlur: this._onBlur })), h(FormFieldMessage, { helpText: this.helpText, errorText: this.errorText })));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "label": ["handleLabelChange"]
  }; }
};
RuxTextarea.style = ruxTextareaCss;

export { RuxTextarea as rux_textarea };
