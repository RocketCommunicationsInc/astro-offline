import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-01dd0ed8.js';
import { F as FormFieldMessage } from './FormFieldMessage-51640ee4.js';
import { h as hasSlot, r as renderHiddenInput } from './utils-0acfdbb3.js';

const ruxRadioGroupCss = ".rux-help-text{margin-top:0.625rem;color:var(--color-default-text);font-size:var(--font-body-2-font-size);font-family:var(--font-body-2-font-family);font-weight:var(--font-body-2-font-weight);letter-spacing:var(--font-body-2-letter-spacing)}.rux-error-text{padding-left:1.625rem;background-image:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20128%20128%22%3E%0A%20%20%3Cpath%20fill%3D%22%23FF3030%22%20fill-rule%3D%22evenodd%22%20d%3D%22M64.031%205c8.461%200%2068.88%20107.243%2063.648%20114.184-5.232%206.942-120.805%205.477-127.212%200C-5.941%20113.708%2055.57%205%2064.03%205zm3.45%2075.894l1.822-34.893H56.946l1.82%2034.893h8.715zM56.803%2093.108c0%201.929.547%203.423%201.643%204.483%201.095%201.06%202.642%201.589%204.642%201.589%201.953%200%203.477-.542%204.572-1.625%201.095-1.084%201.643-2.566%201.643-4.447%200-1.952-.542-3.452-1.625-4.5-1.084-1.047-2.613-1.571-4.59-1.571-2.047%200-3.607.512-4.678%201.536-1.072%201.023-1.607%202.535-1.607%204.535z%22%2F%3E%0A%3C%2Fsvg%3E);background-repeat:no-repeat;background-size:1rem;background-position:center left 0rem;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--color-status-critical-fill);font-size:var(--font-body-2-bold-font-size);font-family:var(--font-body-2-bold-font-family);font-weight:var(--font-body-2-bold-font-weight);letter-spacing:var(--font-body-2-bold-letter-spacing)}:host{--radiogroup-border-color:var(--color-active);display:block}.hidden,:host([hidden]){display:none}::slotted(rux-radio){display:block;margin-bottom:0.625rem}::slotted(rux-radio:last-of-type){margin-bottom:0}.rux-radio-group{padding:1rem;border:1px solid var(--radiogroup-border-color, #2b659b);border-radius:var(--radius-base)}.rux-radio-group--invalid{border:1px solid var(--color-status-critical-fill)}.rux-label{margin-bottom:var(--spacing-input-label-top)}";

const RuxRadioGroup = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ruxChange = createEvent(this, "ruxchange", 7);
    this.hasLabelSlot = false;
    /**
     * Presentational only. Renders the Radio Group as invalid.
     */
    this.invalid = false;
    /**
     * The name of the radio group - submitted with form data. Must match the name of the radios in the group.
     */
    this.name = '';
  }
  emitChange() {
    this.ruxChange.emit(this.value);
  }
  handleLabelChange() {
    this._handleSlotChange();
  }
  connectedCallback() {
    this._handleClick = this._handleClick.bind(this);
    this._handleSlotChange = this._handleSlotChange.bind(this);
  }
  disconnectedCallback() {
    this.el.shadowRoot.removeEventListener('slotchange', this._handleSlotChange);
  }
  componentWillLoad() {
    const radios = Array.from(this.el.querySelectorAll('rux-radio'));
    if (radios.length > 1 && !this.value) {
      this.value = radios[0].getAttribute('value');
    }
    this._handleSlotChange();
  }
  get hasLabel() {
    return this.label ? true : this.hasLabelSlot;
  }
  _handleClick(e) {
    const selectedRadio = e.target && e.target.closest('rux-radio');
    if (selectedRadio && !selectedRadio.disabled) {
      const oldValue = this.value;
      const newValue = selectedRadio.value;
      if (newValue !== oldValue) {
        this.value = newValue;
      }
    }
  }
  _selectedRadioIsDisabled() {
    const radio = this.el.querySelector(`rux-radio[value="${this.value}"]`);
    return radio && radio.disabled;
  }
  _handleSlotChange() {
    this.hasLabelSlot = hasSlot(this.el, 'label');
  }
  render() {
    if (this.value) {
      renderHiddenInput(true, this.el, this.name, this.value, this._selectedRadioIsDisabled());
    }
    return (h(Host, { onClick: this._handleClick }, h("div", { class: "rux-form-field", part: "form-field" }, h("div", { class: {
        'rux-label': true,
        hidden: !this.hasLabel,
      }, part: "label" }, h("slot", { onSlotchange: this._handleSlotChange, name: "label" }, this.label)), h("div", { class: {
        'rux-radio-group': true,
        'rux-radio-group--invalid': this.invalid,
      }, role: "radiogroup", part: "radiogroup" }, h("slot", null))), h(FormFieldMessage, { errorText: this.errorText, helpText: this.helpText })));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "value": ["emitChange"],
    "label": ["handleLabelChange"]
  }; }
};
RuxRadioGroup.style = ruxRadioGroupCss;

export { RuxRadioGroup as rux_radio_group };
