import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-01dd0ed8.js';
import { F as FormFieldMessage } from './FormFieldMessage-51640ee4.js';
import { r as renderHiddenInput } from './utils-0acfdbb3.js';

const ruxCheckboxCss = ":host{display:inline-block;--checkbox-label-color:var(--color-default-text);--checkbox-background-color:var(--color-background);--checkbox-border-color:var(--color-active);--checkbox-checked-color:var(--color-primary);--checkbox-hover-border-color:var(--color-hover)}:host *,:host *::before,:host *::after{box-sizing:inherit}.hidden,:host([hidden]){display:none}.rux-form-field{display:flex;flex-direction:column;font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);letter-spacing:var(--font-body-1-letter-spacing);font-weight:var(--font-body-1-font-weight);color:var(--color-default-text)}.rux-checkbox{display:flex;position:relative;line-height:1.2}.rux-checkbox--indeterminate input[type=checkbox]+label::after{position:absolute;display:flex;content:\"\";top:5px;width:10px;height:5px;transform:rotate(0deg);border-right:0;border-top:0;border-bottom:2px solid var(--checkbox-checked-color);left:4px}.rux-checkbox input[type=checkbox]{-webkit-appearance:none;appearance:none}.rux-checkbox input[type=checkbox]+label{position:relative;display:flex;align-items:center;justify-content:flex-start;color:var(--checkbox-label-color);letter-spacing:0.5px;cursor:pointer;margin-left:-7px}.rux-checkbox input[type=checkbox]+label::before{display:flex;content:\"\";align-self:start;height:1.125rem;width:1.125rem;margin:0 0.625rem 0 0;background-color:var(--checkbox-background-color);border:1px solid var(--checkbox-border-color);border-radius:var(--checkbox-radius)}.rux-checkbox input[type=checkbox]:checked+label::after{position:absolute;display:flex;content:\"\";top:5px;height:6px;width:12px;left:3px;border-right:2px solid var(--checkbox-checked-color);border-top:2px solid var(--checkbox-checked-color);transform:rotate(125deg)}.rux-checkbox input[type=checkbox]:checked+label::before{border-color:var(--checkbox-border-color)}.rux-checkbox input[type=checkbox]:disabled+label{cursor:not-allowed;opacity:var(--disabled-opacity)}.rux-checkbox input[type=checkbox]:not(:disabled):hover+label::before{border-color:var(--checkbox-hover-border-color)}.rux-checkbox--has-text{margin-bottom:0}.rux-checkbox+.rux-help-text{margin-bottom:0.75rem}.rux-help-text{margin-top:0.625rem;color:var(--color-default-text);font-size:var(--font-body-2-font-size);font-family:var(--font-body-2-font-family);font-weight:var(--font-body-2-font-weight);letter-spacing:var(--font-body-2-letter-spacing)}";

let id = 0;
const RuxCheckbox = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ruxChange = createEvent(this, "ruxchange", 7);
    this.ruxInput = createEvent(this, "ruxinput", 7);
    this.ruxBlur = createEvent(this, "ruxblur", 7);
    this.checkboxId = `rux-checkbox-${++id}`;
    /**
     * The checkbox name
     */
    this.name = '';
    /**
     * The checkbox value
     */
    this.value = '';
    /**
     * Toggles checked state of a checkbox
     */
    this.checked = false;
    /**
     * Toggles indeterminate state of a checkbox. The indeterminate property does not exist in HTML, but can be set in JS. [HTML Checkbox & Indeterminate State](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate)
     */
    this.indeterminate = false;
    /**
     * Disables the checkbox via HTML disabled attribute. Checkbox takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  updateChecked() {
    if (this._inputEl) {
      this._inputEl.checked = this.checked;
    }
  }
  updateIndeterminate() {
    if (this._inputEl) {
      this._inputEl.indeterminate = this.indeterminate;
    }
  }
  connectedCallback() {
    this._onClick = this._onClick.bind(this);
    this._onInput = this._onInput.bind(this);
  }
  componentDidLoad() {
    if (this._inputEl && this.indeterminate) {
      // indeterminate property does not exist in HTML but is accessible via js
      this._inputEl.indeterminate = true;
    }
  }
  _onClick(e) {
    const target = e.target;
    if (this.indeterminate) {
      this.indeterminate = false;
    }
    this.checked = target.checked;
    this.ruxChange.emit();
  }
  _onInput(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxInput.emit();
  }
  render() {
    const { checkboxId, checked, disabled, helpText, name, value, indeterminate, } = this;
    if (!this.indeterminate) {
      renderHiddenInput(true, this.el, this.name, this.value ? this.value : 'on', this.disabled, this.checked);
    }
    return (h(Host, null, h("div", { class: "rux-form-field" }, h("div", { class: {
        'rux-checkbox': true,
        'rux-checkbox--indeterminate': indeterminate,
        'rux-checkbox--has-text': helpText !== undefined,
      } }, h("input", { type: "checkbox", name: name, id: checkboxId, disabled: disabled, checked: checked,
      //Allows storybook's indetermiante control to take effect.
      indeterminate: indeterminate, value: value, onChange: this._onClick, onInput: this._onInput, onBlur: this._onBlur, ref: (el) => (this._inputEl = el) }), h("label", { htmlFor: checkboxId }, this.label, h("span", { class: {
        hidden: !!this.label,
      } }, h("slot", null))))), h(FormFieldMessage, { helpText: helpText })));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "checked": ["updateChecked"],
    "indeterminate": ["updateIndeterminate"]
  }; }
};
RuxCheckbox.style = ruxCheckboxCss;

export { RuxCheckbox as rux_checkbox };
