import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-01dd0ed8.js';
import { F as FormFieldMessage } from './FormFieldMessage-51640ee4.js';
import { h as hasSlot, r as renderHiddenInput } from './utils-0acfdbb3.js';

const RuxDatetime = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * The date time to be formatted
     */
    this.date = new Date();
    /**
     * The locale
     */
    this.locale = 'default';
    /**
     * Display date in 12 hour time.
     */
    this.hour12 = false;
  }
  render() {
    const date = new Date(this.date);
    const { day, era, hour, hour12, locale, minute, month, second, timeZone, timeZoneName, weekday, year, } = this;
    return new Intl.DateTimeFormat(locale, {
      day,
      era,
      hour,
      hour12,
      minute,
      month,
      second,
      timeZone,
      timeZoneName,
      weekday,
      year,
    }).format(date);
  }
};

const ruxInputCss = ".rux-help-text{margin-top:0.625rem;color:var(--color-default-text);font-size:var(--font-body-2-font-size);font-family:var(--font-body-2-font-family);font-weight:var(--font-body-2-font-weight);letter-spacing:var(--font-body-2-letter-spacing)}.rux-error-text{padding-left:1.625rem;background-image:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20128%20128%22%3E%0A%20%20%3Cpath%20fill%3D%22%23FF3030%22%20fill-rule%3D%22evenodd%22%20d%3D%22M64.031%205c8.461%200%2068.88%20107.243%2063.648%20114.184-5.232%206.942-120.805%205.477-127.212%200C-5.941%20113.708%2055.57%205%2064.03%205zm3.45%2075.894l1.822-34.893H56.946l1.82%2034.893h8.715zM56.803%2093.108c0%201.929.547%203.423%201.643%204.483%201.095%201.06%202.642%201.589%204.642%201.589%201.953%200%203.477-.542%204.572-1.625%201.095-1.084%201.643-2.566%201.643-4.447%200-1.952-.542-3.452-1.625-4.5-1.084-1.047-2.613-1.571-4.59-1.571-2.047%200-3.607.512-4.678%201.536-1.072%201.023-1.607%202.535-1.607%204.535z%22%2F%3E%0A%3C%2Fsvg%3E);background-repeat:no-repeat;background-size:1rem;background-position:center left 0rem;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--color-status-critical-fill);font-size:var(--font-body-2-bold-font-size);font-family:var(--font-body-2-bold-font-family);font-weight:var(--font-body-2-bold-font-weight);letter-spacing:var(--font-body-2-bold-letter-spacing)}:host{--input-background-color:var(--color-background);--input-border-color:var(--color-active);--input-text-color:var(--color-default-text);--input-focus-border-color:var(--color-hover);--input-selection-background-color:var(--color-global-secondary-300);--input-invalid-border-color:var(--color-status-critical-fill);display:block}:host .rux-form-field{display:flex;flex-direction:column;align-items:flex-start;justify-content:center;color:var(--color-default-text)}:host .icon-container{background-color:#101923;align-self:flex-end;position:absolute;width:1.188rem;height:1.313rem;padding-left:0.5rem}:host .show-password{margin-top:0.6rem;margin-right:0.5rem}:host .with-label{margin-top:1.7rem}:host rux-icon{cursor:pointer}:host .rux-input{box-sizing:border-box;order:2;width:100%;border:1px solid var(--input-border-color);border-radius:var(--radius-base);font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);font-weight:var(--font-body-1-font-weight);letter-spacing:var(--font-body-1-letter-spacing);color:var(--input-text-color);background-color:var(--input-background-color)}:host .rux-input--invalid{border:1px solid var(--input-invalid-border-color)}:host .rux-input--disabled{opacity:0.4;opacity:var(--disabled-opacity);cursor:not-allowed}:host .rux-input--small{padding:0.25rem 0.5rem 0.188rem 0.5rem}:host .rux-input--medium{padding:0.5rem 0.5rem 0.438rem 0.5rem}:host .rux-input--large{padding:0.813rem 0.5rem 0.875rem 0.5rem}:host .rux-input--search{-webkit-appearance:none;-moz-appearance:none;padding-left:2rem;background:var(--input-background-color) url(\"data:image/svg+xml,%3Csvg width='40' height='40' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M35.37 26.457a15.282 15.282 0 000-21.918c-6.176-6.052-16.187-6.052-22.361 0a15.274 15.274 0 00-1.541 20.166c-.367.147-.713.37-1.014.665L.926 34.709a3.056 3.056 0 000 4.383 3.208 3.208 0 004.472 0l9.528-9.339c.352-.345.604-.753.756-1.186 6.137 3.831 14.347 3.124 19.687-2.11zM24.193 4.043c6.454 0 11.686 5.129 11.686 11.455 0 6.326-5.232 11.455-11.686 11.455-6.455 0-11.687-5.129-11.687-11.455 0-6.326 5.232-11.455 11.687-11.455z' fill='%234dacff' fill-rule='evenodd'/%3E%3C/svg%3E\") 10px/0.975rem no-repeat}:host .rux-input:focus{border-color:var(--input-focus-border-color);outline:none}:host .rux-input:hover{border-color:var(--input-focus-border-color);outline:none}:host .rux-input--disabled:hover{border:1px solid var(--input-border-color);color:var(--input-text-color)}:host .rux-input--invalid:hover{border:1px solid var(--input-invalid-border-color)}:host .rux-input::placeholder{color:var(--color-placeholder-text)}:host .rux-input-label{font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);font-weight:var(--font-body-1-font-weight);letter-spacing:var(--font-body-1-letter-spacing);margin-bottom:var(--spacing-input-label-top)}:host .rux-input-label__asterisk{margin-left:4px}:host ::selection{background-color:var(--input-selection-background-color)}.hidden,:host([hidden]){display:none}";

let id = 0;
const RuxInput = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ruxChange = createEvent(this, "ruxchange", 7);
    this.ruxInput = createEvent(this, "ruxinput", 7);
    this.ruxBlur = createEvent(this, "ruxblur", 7);
    this.inputId = `rux-input-${++id}`;
    this.hasLabelSlot = false;
    this.togglePassword = false;
    this.isPasswordVisible = false;
    this.iconName = 'visibility';
    /**
     * Presentational only. Renders the Input Field as invalid.
     */
    this.invalid = false;
    /**
     * The input value
     */
    this.value = '';
    /**
     * The input name
     */
    this.name = '';
    /**
     * The input type
     */
    this.type = 'text';
    /**
     * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    /**
     * Sets the input as disabled
     */
    this.required = false;
    /**
     * Control the padding around the input field
     */
    this.size = 'medium';
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  handleLabelChange() {
    this._handleSlotChange();
  }
  handleTypeChange() {
    this._setTogglePassword();
  }
  connectedCallback() {
    this._onChange = this._onChange.bind(this);
    this._onInput = this._onInput.bind(this);
    this._handleSlotChange = this._handleSlotChange.bind(this);
    this._handleType = this._handleType.bind(this);
    this._handleTogglePassword = this._handleTogglePassword.bind(this);
  }
  disconnectedCallback() {
    this.el.shadowRoot.removeEventListener('slotchange', this._handleSlotChange);
  }
  componentWillLoad() {
    this._handleSlotChange();
    this._setTogglePassword();
  }
  get hasLabel() {
    return this.label ? true : this.hasLabelSlot;
  }
  _onChange(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxChange.emit();
  }
  _onInput(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxInput.emit();
  }
  _handleSlotChange() {
    this.hasLabelSlot = hasSlot(this.el, 'label');
  }
  _setTogglePassword() {
    if (this.type === 'password') {
      this.togglePassword = true;
    }
  }
  _handleTogglePassword() {
    this.isPasswordVisible = !this.isPasswordVisible;
    if (this.isPasswordVisible) {
      this.iconName = 'visibility-off';
    }
    else {
      this.iconName = 'visibility';
    }
  }
  _handleType() {
    let realType = '';
    !this.togglePassword
      ? (realType = this.type)
      : this.togglePassword && this.isPasswordVisible
        ? (realType = 'text')
        : (realType = this.type);
    return realType;
  }
  render() {
    const { disabled, el, errorText, helpText, inputId, invalid, label, max, min, name, _onChange, _onInput, _onBlur, _handleType, _handleSlotChange, _handleTogglePassword, placeholder, required, step, type, value, hasLabel, iconName, size, } = this;
    renderHiddenInput(true, el, name, value, disabled);
    return (h(Host, null, h("div", { class: "rux-form-field", part: "form-field" }, h("label", { class: {
        'rux-input-label': true,
      }, part: "label", "aria-hidden": hasLabel ? 'false' : 'true', htmlFor: inputId }, h("span", { class: {
        hidden: !hasLabel,
      } }, h("slot", { name: "label", onSlotchange: _handleSlotChange }, label, required && (h("span", { class: "rux-input-label__asterisk" }, "*"))))), h("input", { name: name, disabled: disabled, type: _handleType(), "aria-invalid": invalid ? 'true' : 'false', placeholder: placeholder, required: required, step: step, min: min, max: max, value: value, class: {
        'rux-input': true,
        'rux-input--disabled': disabled,
        'rux-input--invalid': invalid,
        'rux-input--search': type === 'search',
        'rux-input--small': size === 'small',
        'rux-input--medium': size === 'medium',
        'rux-input--large': size === 'large',
      }, id: this.inputId, autoComplete: this.togglePassword ? 'off' : 'on', onChange: _onChange, onInput: _onInput, onBlur: _onBlur }), this.togglePassword && (h("div", { class: {
        'icon-container': true,
        'show-password': true,
        'with-label': hasLabel,
      } }, h("rux-icon", { part: "icon", onClick: _handleTogglePassword, icon: iconName, size: "extra-small" })))), h(FormFieldMessage, { errorText: errorText, helpText: helpText })));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "label": ["handleLabelChange"],
    "type": ["handleTypeChange"]
  }; }
};
RuxInput.style = ruxInputCss;

const ruxTableCss = ":host{display:table;width:100%;border-collapse:separate;border-spacing:0;color:var(--table-row-text-color);border-style:solid;border-width:1px;border-color:var(--table-border-color);background:var(--table-row-background-color);text-align:left;overflow:scroll;--table-border-color:var(--color-background);--table-header-background-color:var(--color-gsb-global-status-bar);--table-header-border-color:var(--color-surface);--table-header-text-color:var(--color-gsb-default-text);--table-header-box-shadow:0 0.25rem 0.5rem rgba(0, 0, 0, 0.45);--table-row-background-color:var(--color-surface);--table-row-text-color:var(--color-default-text);--table-row-border-color:var(--color-background);--table-row-hover-background-color:var(--color-table-hover);--table-row-hover-text-color:var(--color-default-text);--table-row-selected-background-color:var(--color-background);--table-row-selected-border-color:var(--color-primary)}:host([hidden]){display:none}";

const RuxTable = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return (h(Host, null, h("slot", null)));
  }
};
RuxTable.style = ruxTableCss;

const ruxTableBodyCss = ":host{display:table-row-group}:host([hidden]){display:none}";

const RuxTableBody = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return (h(Host, null, h("slot", null)));
  }
};
RuxTableBody.style = ruxTableBodyCss;

const ruxTableCellCss = ":host{display:table-cell;border-width:1px 0;border-style:solid;border-color:var(--table-row-border-color);padding:0.625rem 1rem;white-space:nowrap}:host([hidden]){display:none}";

const RuxTableCell = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return (h(Host, null, h("slot", null)));
  }
};
RuxTableCell.style = ruxTableCellCss;

const ruxTableHeaderCss = ":host{display:table-header-group;box-shadow:var(--table-header-box-shadow);border-top-width:1px;border-top-style:solid;border-top-color:var(--table-header-border-color)}:host([hidden]){display:none}";

const RuxTableHeader = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return (h(Host, null, h("slot", null)));
  }
};
RuxTableHeader.style = ruxTableHeaderCss;

const ruxTableHeaderCellCss = ":host{display:table-cell;vertical-align:middle;border-top-width:1px;border-top-style:solid;border-top-color:var(--table-header-border-color);background:var(--table-header-background-color);color:var(--table-header-text-color);font-family:var(--font-heading-5-font-family);font-size:var(--font-heading-5-font-size);font-weight:var(--font-heading-5-font-weight);letter-spacing:var(--font-heading-5-letter-spacing);padding:0.625rem 1rem;white-space:nowrap}:host([hidden]){display:none}";

const RuxTableHeaderCell = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return (h(Host, null, h("slot", null)));
  }
};
RuxTableHeaderCell.style = ruxTableHeaderCellCss;

const ruxTableHeaderRowCss = ":host{--table-header-background-color:var(--color-gsb-global-status-bar);display:table-row;background-color:var(--table-header-background-color)}:host([hidden]){display:none}::slotted(rux-table-header-cell:first-child){padding-left:1.875rem}::slotted(rux-table-header-cell:last-child){padding-right:1.875rem}";

const RuxTableHeaderRow = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return (h(Host, null, h("slot", null)));
  }
};
RuxTableHeaderRow.style = ruxTableHeaderRowCss;

const ruxTableRowCss = ":host{display:table-row}:host([hidden]){display:none}:host(.is-selected){background:var(--table-row-selected-background-color)}:host(.is-selected) ::slotted(rux-table-cell){border-color:var(--table-row-selected-border-color)}:host(:hover:not(.is-selected)){background:var(--table-row-hover-background-color);color:var(--table-row-hover-text-color)}::slotted(rux-table-cell:first-child){padding-left:1.875rem}::slotted(rux-table-cell:last-child){padding-right:1.875rem}";

const RuxTableRow = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Changes the background color of the row. Can be applied to multiple rows at once.
     */
    this.selected = false;
  }
  render() {
    return (h(Host, { class: {
        'is-selected': this.selected,
      } }, h("slot", null)));
  }
};
RuxTableRow.style = ruxTableRowCss;

export { RuxDatetime as rux_datetime, RuxInput as rux_input, RuxTable as rux_table, RuxTableBody as rux_table_body, RuxTableCell as rux_table_cell, RuxTableHeader as rux_table_header, RuxTableHeaderCell as rux_table_header_cell, RuxTableHeaderRow as rux_table_header_row, RuxTableRow as rux_table_row };
