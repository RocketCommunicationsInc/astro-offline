import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-01dd0ed8.js';

const ruxMenuItemCss = ":host{--popup-menu-text-color:var(--color-primary);--popup-menu-item-background-color:var(--color-background);--popup-menu-item-hover-background-color:var(--color-list-hover);--popup-menu-item-hover-text-color:var(--color-hover);display:block}:host li{list-style:none;padding:0.15rem 0.75rem;overflow:hidden;font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);font-weight:var(--font-body-1-font-weight);letter-spacing:var(--font-body-1-letter-spacing);background-color:var(--popup-menu-item-background-color);color:var(--popup-menu-text-color)}:host li:hover{background-color:var(--popup-menu-item-hover-background-color)}:host li a,:host li div{text-overflow:ellipsis;text-decoration:none;color:var(--popup-menu-text-color);word-wrap:none;white-space:nowrap;overflow:hidden}:host li a:hover,:host li div:hover{color:var(--popup-menu-item-hover-text-color)}:host li a{display:block;padding:0;width:100%}:host([hidden]){display:none}:host([disabled]){cursor:not-allowed}:host([disabled]) li:hover{background-color:transparent}:host([disabled]) li a,:host([disabled]) li div{opacity:var(--disabled-opacity)}";

const RuxMenuItem = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ruxMenuItemSelected = createEvent(this, "ruxmenuitemselected", 7);
    /**
     * Disables the item
     */
    this.disabled = false;
    this.itemOnClick = () => {
      const emittedValue = this.value ? this.value : this.el.textContent;
      this.ruxMenuItemSelected.emit({ value: emittedValue });
    };
  }
  handleClick() {
    if (!this.disabled) {
      this.itemOnClick();
    }
  }
  render() {
    const { disabled, href, rel, download, target } = this;
    const TagType = href ? 'a' : 'div';
    const attributes = TagType === 'a' ? { download, href, rel, target } : {};
    return (h(Host, { "aria-disabled": disabled ? 'true' : null }, h("li", null, h(TagType, Object.assign({}, attributes), h("slot", { name: "start" }), h("slot", null)))));
  }
  get el() { return getElement(this); }
};
RuxMenuItem.style = ruxMenuItemCss;

export { RuxMenuItem as rux_menu_item };
